openapi: 3.0.3
info:
  title: Unit21 API Endpoints
  description: |
    Every endpoint available to consumers of the Unit21 API.
  version: '1.0'
  contact:
    name: Unit21
    url: 'https://unit21.ai'
servers:
  - url: 'https://sandbox1-api.unit21.com/v1'
    description: Sandbox1 server for testing
  - url: 'https://sandbox2-api.unit21.com/v1'
    description: Sandbox2 server for testing
security:
  - ApiKeyAuth: []
tags:
  - name: Entities API
    description: >
      _Entities_ are typically businesses or users that have transactions on
      your platform.  The `/entities` endpoint can create, list, and update
      entities.
  - name: Events API
    description: >
      Events have two types, _transaction events_  and _action events_:

      * Transaction events are any monetary flow that is sent or received by an
      entity on your system.

      * Action events are non-monetary changes of state that occur on your
      system, e.g. user logins. The `/events` endpoint sends and receives data
      about significant actions that occur with an entity or instrument on your
      system.  
  - name: Instruments API
    description: >
      Instruments represent any physical, digital, or logical intermediary
      between an entity and a transaction event. The `/instruments` endpoint can
      create, list, and update instruments. 
  - name: Devices API
    description: >
      Devices representing any computer or physical device used to execute an
      event. Devices are most suitable when events can be traced back to a
      specific device fingerprint. The `/devices` endpoint can create, list, and
      update instruments. 
  - name: Agents API
    description: >
      Agents are your organization's members who use the Unit21 system to
      investigate suspicious objects and events. The `/agents` endpoint can list
      your agents. 
  - name: Rules API
    description: >
      Rules are the model logic that will find fraudulent and suspicious
      transactions and actions. Rules create alerts that can turn into cases
      with flagged entities, transactions and instruments. The `/rules` endpoint
      can get and list rules. 
  - name: Alerts API
    description: >
      Alerts have two origins. Typically, alerts are generated whenever a Unit21
      detection tool (like a rule) flags an object, like an entity. However,
      your organization can also send alerts generated from your in-house
      detection systems. The `/alerts` endpoint can create, list, and update
      alerts. 
  - name: Cases API
    description: >
      Cases are usually active investigations, which may span multiple events,
      entities and documents. They can be directly escalated into a suspicious
      activity report. The `/cases` endpoint can create, list, and update
      cases. 
  - name: Sars API
    description: >
      Sars are cases that have been investigated and turned into a Suspicious
      Activity report with the intent to file it to FinCen. The `/sars` endpoint
      can get and list sars. 
  - name: Entity Verification API
    description: >
      Unit21 can execute entity verifications according to steps defined in
      system workflows. They can run when a new entity is added to the system,
      an update is made to an existing entity, or by directly triggering an API
      endpoint.
  - name: Verification Forms API
    description: >
      With verification forms, you can automate ID verification and user
      collection. To gather user input, the `verification forms` endpoint
      creates a URL. This URL is only valid for a specified period of time.
  - name: Tag Associations API
    description: >
      Tags provide a flexible means of linking objects together in the Unit21
      system. You can use the `/tag-associations` endpoint to explore these
      associations.
  - name: Webhooks API
    description: >
      Whenever an event happens on the Unit21 platform, Unit21 can send a
      webhook about the event to whatever URL you configure. Such events include
      entity verification results, generated alerts, case re-openings and
      closings, etcetera.
  - name: Blacklists API
    description: |
      Blacklists comprise one of the following categories:
        * of entities (users or business)
        * IPs (single or ranges)
        * strings
  - name: Datafiles API
    description: >
      If you want to bulk upload multiple objects, you can send them via a POST
      to the `/datafiles` endpoint. For the fastest processing, the datafile
      SHOULD be a JSON file in the format of a typical POST request to this API.
paths:
  /entities/list:
    post:
      tags:
        - Entities API
      summary: List entities
      description: >-
        Returns paginated list of of top-level information about entities. 


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        The `total_count` field contains the total number of entities where the 
        `response_count` field contains the number of entities included in the
        response.
      operationId: list_entities
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                entities:
                  - business_data:
                      account_holder_name: Peter Savage
                      business_name: Segavas Ltd
                      corporate_tax_id: null
                    communication_data:
                      email_addresses:
                        - peter@segavas.co.uk
                      phone_numbers:
                        - ''
                    custom_data:
                      AddressId: 1823116
                      MarketplaceName: Kigo Intl
                      VAT#: '7592753'
                    digital_data:
                      client_fingerprints: []
                      ip_addresses: []
                    document_data: []
                    general_data:
                      children: []
                      continuous_monitoring: false
                      entity_id: 587944-1823116.0
                      entity_subtype: payments
                      entity_type: business
                      is_spooled: false
                      parents: []
                      registered_at: null
                      status: approved-escrow
                      tags: []
                    instrument_ids: []
                    location_data:
                      - building_number: null
                        city: Bristol
                        country: GB
                        postal_code: null
                        state: null
                        street_name: Freshford House
                        type: null
                        unit_number: null
                    media_data: []
                    unit21_id: '162384277'
                  - business_data:
                      account_holder_name: Peter Savage
                      business_name: Segavas Ltd
                      corporate_tax_id: null
                    communication_data:
                      email_addresses:
                        - peter@segavas.co.uk
                      phone_numbers:
                        - ''
                    custom_data:
                      AddressId: 1823113
                      MarketplaceName: Kigo Intl
                      VAT#: '7592753'
                    digital_data:
                      client_fingerprints: []
                      ip_addresses: []
                    document_data: []
                    general_data:
                      children: []
                      continuous_monitoring: false
                      entity_id: 587943-1823113.0
                      entity_subtype: payments
                      entity_type: business
                      is_spooled: false
                      parents: []
                      registered_at: null
                      status: approved-escrow
                      tags: []
                    instrument_ids: []
                    location_data:
                      - building_number: null
                        city: Bristol
                        country: GB
                        postal_code: null
                        state: null
                        street_name: Freshford House
                        type: null
                        unit_number: null
                    media_data: []
                    unit21_id: '162384276'
                response_count: 2
                total_count: 44237
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /entities/create:
    post:
      tags:
        - Entities API
      summary: Create an entity
      description: "Creates a new entity, sending entity data in the request body. \n\nTwo objects are required: `general_data` and EITHER `user_data` OR `business_data` but the objects can be empty. The `user_data` is required if `general_data.entity_type` is set to `user`, otherwise this  field will be ignored. The `business_data` is required if `general_data.entity_type` is set to `business`,  otherwise this field will be ignored.\n\nIf the `/entities/create` API is called for an entity that already exists in our system, it is treated it as an  [upsert](https://docs.unit21.ai/u21/reference/should-i-update-or-upsert) and an update on the existing entity is performed. The response to the request will then contain the entry `previously_existed: true`. \n\nUnit21 selectively ignores upserts if the request is identical to a previous request. The response to any  ignored upsert will contain the field `ignored: true`. \n\nIf you want to perform strict validation and not perform an upsert on conflict, specifying  `options.upsert_on_conflict: false` will result in the API responding with a **409 error code** indicating  that this entity cannot be overwritten.\n\nUpdates to an entity's `general_data.entity_id` are not allowed.\n\nInstruments can be associated with entities by providing the IDs of these  instruments within the `instrument_ids` section of the request. If the instrument doesn't already exist,  Unit21 creates a [placeholder](https://docs.unit21.ai/u21/reference/placeholder-objects) instrument.\n\nWhitelisted entities cannot be updated through the `/entities/create` endpoint. \n\nWe recommend that you create entities prior to running verification. In the event you wish to run a  verification on an entity immediately, Unit21 recommends that you wait at-least 2 minutes for your entity  data to be securely stored. You will receive a **423 error code** if an entity is *busy*.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Verification options](https://docs.unit21.ai/u21/reference/identity-verification-options)\n  - [Risk scores](https://docs.unit21.ai/u21/reference/risk-scores)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\nThe response will consist of the following fields:\n\n  | Field | Type | Description |\n  |-----|-----|-------|\n  | `entity_id`\t             | String   | \tUnique identifier of the entity on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the entity within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `entity_id`) already exists |\n"
      operationId: create_entity
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/createUser'
                - $ref: '#/components/schemas/createBusiness'
            example:
              user_data:
                first_name: John
                middle_name: Joseph
                last_name: Smith
                day_of_birth: 23
                month_of_birth: 12
                year_of_birth: 1990
                gender: female
                ssn: 733-99-5921
              general_data:
                entity_id: u-3593dece-6642-4cdc-8547-aafc1454e0a0
                entity_type: user
                entity_subtype: contractor
                status: active
                registered_at: 1623365011
                parents:
                  - entity_id: entity-5500
                    entity_type: user
                tags:
                  - 'Sector:Europe'
              options:
                identity_verifications:
                  workflow_id: sanctions_check_1
                  run_verifications: false
                  synchronous_response: false
                  include_full_response: false
                resolve_geoip: true
                merge_custom_data: false
                list_merge_strategy: union
                upsert_on_conflict: true
              document_data:
                - document_id: G3352403F
                  document_type: drivers_license
                  state: CA
                  country: US
                  issued_at: 1572673226
                  expires_at: 1572673227
              instrument_ids:
                - 11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                - 54gh2726-76j6-3900-lkbf-b4adf6d36hfa
              communication_data:
                email_addresses:
                  - JohnJay@example.com
                phone_numbers:
                  - '+14159627132'
              digital_data:
                ip_addresses:
                  - ip_address: 255.255.255.255
                    first_seen: 1623365011
                    last_seen: 1623365011
                client_fingerprints:
                  - 4908hsdfknkd90432nj3k2kj2jk23kj2k3jk2j3
              location_data:
                - type: SHIPPING
                  building_number: 6c
                  unit_number: 22a
                  street_name: California Ave
                  city: Redmond
                  state: CA
                  postal_code: 07710-0001
                  country: US
              risk_scores:
                - name: risk_score1
                  score: 65
                  denominator: 100
                - name: risk_score1
                  score: 85
              custom_data:
                internal_notes: Reviewed by Mitchell on 31 June 2019
                reviewers: 3
                login: 1638384860
                timestamp: '2012-03-40 05:12:41.000Z'
                daily_email: true
                employees:
                  - John
                  - Anna
                  - Peter
                socure_device_session_id: '12121212121212112'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEntityResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/entities/{unit21_id}':
    get:
      tags:
        - Entities API
      summary: Get an entity
      description: >-
        Returns all data objects belonging to a single entity, including
        `general_data`, `document_data`, etc.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the entity is first created.
      operationId: get_entity_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                unit21_id: '1237466'
                user_data:
                  day_of_birth: 21
                  first_name: Andrew
                  gender: male
                  last_name: Velazquez
                  middle_name: Gerald
                  month_of_birth: 1
                  ssn: 197-64-6627
                  year_of_birth: 1987
                communication_data:
                  email_addresses: []
                  phone_numbers: []
                custom_data: null
                digital_data:
                  client_fingerprints: []
                  ip_addresses: []
                document_data:
                  - country: US
                    document_id: G3352413F
                    document_type: drivers_license
                    expires_at: null
                    issued_at: null
                    state: CA
                  - country: US
                    document_id: E1234566798D
                    document_type: passport
                    expires_at: null
                    issued_at: null
                    state: FL
                general_data:
                  children: []
                  entity_id: u-3593dece-6642-4cdc-8547-aafc1454e0a0
                  entity_subtype: null
                  entity_type: user
                  is_spooled: false
                  parents: []
                  registered_at: 1591905045
                  status: active
                  tags: []
                instrument_ids:
                  - instrumentC-08c4af4f-2392-4808-afb5-335b166293b7
                location_data: []
                media_data:
                  - created_at: 1620831331
                    media_type: null
                    name: mergeIT2
                  - created_at: 1620831331
                    media_type: IMAGE_PASSPORT_FRONT
                    name: mergeIT22
                risk_scores: []
                options: []
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/{org_name}/entities/{entity_id}':
    get:
      tags:
        - Entities API
      summary: Get an entity using external ID
      description: >-
        Returns all data objects belonging to a single entity, including
        `general_data`, `document_data`, etc.


        This endpoint requires the `entity_id` which is a unique ID created by
        your organization to identify the entity. The `org_name` is your Unit21
        appointed organization name such as `google` or `acme`.
      operationId: get_entity_by_external
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                unit21_id: '1237466'
                user_data:
                  day_of_birth: 21
                  first_name: Andrew
                  gender: male
                  last_name: Velazquez
                  middle_name: Gerald
                  month_of_birth: 1
                  ssn: 197-64-6627
                  year_of_birth: 1987
                communication_data:
                  email_addresses: []
                  phone_numbers: []
                custom_data: null
                digital_data:
                  client_fingerprints: []
                  ip_addresses: []
                document_data:
                  - country: US
                    document_id: G3352413F
                    document_type: drivers_license
                    expires_at: null
                    issued_at: null
                    state: CA
                  - country: US
                    document_id: E1234566798D
                    document_type: passport
                    expires_at: null
                    issued_at: null
                    state: FL
                general_data:
                  children: []
                  entity_id: u-3593dece-6642-4cdc-8547-aafc1454e0a0
                  entity_subtype: null
                  entity_type: user
                  is_spooled: false
                  parents: []
                  registered_at: 1591905045
                  status: active
                  tags: []
                instrument_ids:
                  - instrumentC-08c4af4f-2392-4808-afb5-335b166293b7
                location_data: []
                media_data:
                  - created_at: 1620831331
                    media_type: null
                    name: mergeIT2
                  - created_at: 1620831331
                    media_type: IMAGE_PASSPORT_FRONT
                    name: mergeIT22
                risk_scores: []
                options: []
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/entities/{unit21_id}/update':
    put:
      tags:
        - Entities API
      summary: Update an entity
      operationId: update_entity
      description: "Updates an entity's information using the `unit21_id`.\n\nUpdating an entity has no required fields. You MAY send any subset of the fields that the `entities/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the entity is first created.\n\nNote that you can also update an entity using an upsert through `/entities/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Verification options](https://docs.unit21.ai/u21/reference/identity-verification-options)\n  - [Risk scores](https://dash.readme.com/project/unit21/v1.0/refs/risk-scores)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field | Type | Description |\n  |-----|-----|-------|\n  | `entity_id`\t             | String   | \tUnique identifier of the entity on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the entity within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `entity_id`) already exists |"
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        description: Any or all of the following objects are accepted
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/generalEntities'
                - $ref: '#/components/schemas/documentDataArray'
                - $ref: '#/components/schemas/communicationData'
                - $ref: '#/components/schemas/digitalDataArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/riskScores'
                - $ref: '#/components/schemas/entityOptions'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/userData'
                - $ref: '#/components/schemas/businessData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                entity_id: e910dnc92el
                unit21_id: 32403
  '/{org_name}/entities/{entity_id}/update':
    put:
      tags:
        - Entities API
      summary: Update entity using external ID
      description: "Updates an entity's information using the `entity_id` from your platform. \n\nUpdating an entity has no required fields. You MAY send any  subset of the fields that the entities/create endpoint accepts.\n\nThis endpoint requires the `entity_id` which is a unique ID created by your organization to identify the entity. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.\n\nNote that you can also update an entity using an upsert through `/entities/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Verification options](https://docs.unit21.ai/u21/reference/identity-verification-options)\n  - [Risk scores](https://dash.readme.com/project/unit21/v1.0/refs/risk-scores)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field | Type | Description |\n  |-----|-----|-------|\n  | `entity_id`\t             | String   | \tUnique identifier of the entity on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the entity within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `entity_id`) already exists |"
      operationId: update_entity_by_external
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        description: Any or all of the following objects are accepted
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/generalEntities'
                - $ref: '#/components/schemas/documentDataArray'
                - $ref: '#/components/schemas/communicationData'
                - $ref: '#/components/schemas/digitalDataArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/riskScores'
                - $ref: '#/components/schemas/entityOptions'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/userData'
                - $ref: '#/components/schemas/businessData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                entity_id: e910dnc92el
                unit21_id: 32401
  '/entities/{unit21_id}/add-instruments':
    put:
      tags:
        - Entities API
      summary: Add instruments to entity
      description: >-
        Associate an entity with an array of instruments.


        Specify the `instrument_id` of the instrument (and not the `unit21_id`)
        when associating instruments.


        If we do not find any instruments with a corresponding `instrument_id`
        in our system, we will create a
        [placeholder](https://docs.unit21.ai/u21/reference/placeholder-objects)
        for it.


        Instrument details can then be supplemented through the
        `/instruments/create` or `/instruments/update` endpoints.
      operationId: add_instruments_to_entity
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkInstrument'
      responses:
        '200':
          description: OK
  '/entities/{unit21_id}/link-media':
    put:
      tags:
        - Entities API
      summary: Add media to an entity
      description: >-
        Adds rich media objects (images, videos, etc.) to an existing entity. 


        This endpoint is useful for sending in rich media such as profile
        pictures, ID card scans, official documents etc.  that you want
        available for investigative and verification purposes.


        The payload to this endpoint can either be a **form-data** or a
        **base64** encoded media file via the requests JSON body.


        **Form-data** sent to this endpoint must use the key `media_key` and the
        `value` as the media file.  If you wish to provide optional information,
        use the `media_key` and provide stringified JSON data as the value. 
        There are no required fields in each media file's supplementary form
        data. However, if a recognized `media_type` value is provided,  the
        Unit21 system will be able to use the media object for purposes such as
        document verification.


        ```
          --form 'document_front=@/src/103031/images/document_front.jpg' \
          --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
        ```


        **Base64** encoded media objects must follow the format:


        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Drivers License",
            "media_type": "IMAGE_DRIVERS_LICENSE_FRONT",
            "custom_data": {
              "internal_notes": "Reviewed by Mitchell on 31 June 2019",
              "reviewers": 3,
              "login": 1638384860,
              "timestamp": "2012-03-40 05:12:41.000Z",
              "daily_email": true,
              "employees": ["John", "Anna", "Peter"],
              "socure_device_session_id": "12121212121212112"
            }
          }
        ```
            
        `media` and `name` are the only required fields for each media object.
        Supplementary form data is sent through the optional `custom_data`
        object.


        For verification purposes, recognized values of `media_type` are: 


          | media_type                  |
          |-----------------------------|
          | IMAGE_PROFILE_PICTURE       |
          | IMAGE_DRIVERS_LICENSE_FRONT |
          | IMAGE_DRIVERS_LICENSE_BACK  |
          | IMAGE_PASSPORT_FRONT        |
          | IMAGE_ID_CARD_FRONT         |
          | IMAGE_ID_CARD_BACK          |
          | IMAGE_FACE_IMAGE            | 
      operationId: link_media_to_entity
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
  /instruments/list:
    post:
      tags:
        - Instruments API
      summary: List instruments
      description: >
        Returns paginated list of of top-level information about instruments. 

        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        The `total_count` field contains the total number of instruments where
        the  `response_count` field contains the number of instruments included
        in the response.
      operationId: list_instruments
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listResponse'
              example:
                instruments:
                  - custom_data: null
                    instrument_id: i-512f1b1b-eac2-410d-a80e-afcab151ea61
                    instrument_type: bank_account
                    is_spooled: false
                    parent_instrument_id: null
                    registered_at: null
                    source: null
                    status: inactive
                    tags: []
                    unit21_id: '198374'
                  - custom_data:
                      credit_card_expiration: 01/25
                      credit_card_provider: VISA 13 digit
                    instrument_id: '502099715109'
                    instrument_type: credit_card
                    is_spooled: false
                    parent_instrument_id: null
                    registered_at: null
                    source: null
                    status: inactive
                    tags: []
                    unit21_id: '198373'
                  - custom_data:
                      credit_card_expiration: 11/29
                      credit_card_provider: JCB 16 digit
                    instrument_id: '342735341049060'
                    instrument_type: credit_card
                    is_spooled: false
                    parent_instrument_id: null
                    registered_at: null
                    source: null
                    status: active
                    tags: []
                    unit21_id: '198372'
                  - custom_data: null
                    instrument_id: i-95216b1b-b43b-44ef-9a92-6298565b9c86
                    instrument_type: bank_account
                    is_spooled: false
                    parent_instrument_id: null
                    registered_at: null
                    source: null
                    status: active
                    tags: []
                    unit21_id: '198371'
                response_count: 4
                total_count: 204
  /instruments/create:
    post:
      tags:
        - Instruments API
      summary: Create an instrument
      operationId: create_instrument
      description: "Creates a new instrument, sending instrument data in the request body.\n\nRecommended values for `instrument_type` include: account, crypto_address,  digital_wallet, credit_card, debit_card, gift_card, voucher, check.\n\nIf the `/instruments/create` API is called for an instrument that already exists in our system (i.e.  has an existing `instrument_id`, it is treated it as an  [upsert](https://docs.unit21.ai/u21/reference/should-i-update-or-upsert) and an update on the existing  instrument is performed. The response to the request will then contain the entry `previously_existed: true`. \n\nUnit21 selectively ignores upserts if the request is identical to a previous request. The response to any  ignored upsert will contain the field `ignored: true`. \n\nUpdates to an instrument's `instrument_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                               |\n  |--------------------------|----------|-----------------------------------------------------------|\n  | `instrument_id`\t         | String   | \tUnique identifier of the instrument on your platform    |\n  | `unit21_id`\t             | String   | \tInternal ID of the entity within Unit21's system        |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `instrument_id`) already exists|\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - instrument_id
                - instrument_type
              allOf:
                - $ref: '#/components/schemas/Instruments'
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createInstrumentResponse'
              example:
                instrument_id: inst-235-r431
                previously_existed: false
                unit21_id: '134755129'
  '/instruments/{unit21_id}':
    get:
      tags:
        - Instruments API
      summary: Get an instrument
      description: >-
        Returns all data objects belonging to a single instrument.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the entity is first created.
      operationId: get_instrument_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                custom_data: null
                instrument_id: i-f8bc4f6b-b59a-4bd0-ba86-aff547a3a7ce
                instrument_type: bank_account
                is_spooled: false
                parent_instrument_id: null
                registered_at: null
                source: null
                status: inactive
                tags: []
                unit21_id: '198446'
  '/{org_name}/instruments/{entity_id}':
    get:
      tags:
        - Instruments API
      summary: Get an instrument using external ID
      description: >-
        Returns all data objects belonging to a single instrument.


        This endpoint requires the `instrument_id` which is a unique ID created
        by your organization to identify the instrument. The `org_name` is your
        Unit21 appointed organization name such as `google` or `acme`.
      operationId: get_instrument_by_external
      parameters:
        - $ref: '#/components/parameters/instrument_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                custom_data: null
                instrument_id: i-f8bc4f6b-b59a-4bd0-ba86-aff547a3a7ce
                instrument_type: bank_account
                is_spooled: false
                parent_instrument_id: null
                registered_at: null
                source: null
                status: inactive
                tags: []
                unit21_id: '198446'
  '/instruments/{unit21_id}/update':
    put:
      tags:
        - Instruments API
      summary: Update an instrument
      description: "Updates an instrument's information using the `unit21_id`.\n\nUpdating an instrument has no required fields. You MAY send any subset of the fields that the `instruments/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the instrument is first created.\n\nNote that you can also update an instrument using an upsert through `/instruments/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                                |\n  |--------------------------|----------|------------------------------------------------------------|\n  | `instrument_id`\t         | String   | \tUnique identifier of the instrument on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the entity within Unit21's system         |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `instrument_id`) already exists |\n"
      operationId: update_instrument
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Instruments'
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                instrument_id: 3234-sdghfdf-3332
                unit21_id: '49073'
  '/{org_name}/instruments/{instrument_id}/update':
    put:
      tags:
        - Instruments API
      summary: Update instrument using external ID
      description: "Updates an instrument's information using the `instrument_id` from your platform. \n\nUpdating an instrument has no required fields. You MAY send any  subset of the fields that the `instruments/create` endpoint accepts.\n\nThis endpoint requires the `instrument_id` which is a unique ID created by your organization to identify the instrument. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.\n\nNote that you can also update an instrument using an upsert through `/instruments/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                                |\n  |--------------------------|----------|------------------------------------------------------------|\n  | `instrument_id`\t         | String   | \tUnique identifier of the instrument on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the entity within Unit21's system         |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `instrument_id`) already exists |"
      operationId: update_instrument_by_external
      parameters:
        - $ref: '#/components/parameters/instrument_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Instruments'
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                instrument_id: 3234-sdghfdf-3332
                unit21_id: '49073'
  /devices/list:
    post:
      tags:
        - Devices API
      summary: List devices
      description: >
        Returns paginated list of of top-level information about devices. 

        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        The `total_count` field contains the total number of devices where the 
        `response_count` field contains the number of devices included in the
        response.
      operationId: list_devices
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listResponse'
              example:
                devices:
                  devices:
                    - app_version: 5.44.5
                      custom_data: null
                      device_id: 11b72726-18d6-43b3-a0bf-b4adf6d576474
                      device_manufacturer: samsung
                      device_model: SM-N970U
                      device_subtype: ios
                      device_type: mobile
                      entities:
                        - entity_id: userA-11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                          entity_type: user
                          unit21_id: 571485314
                      is_spooled: false
                      network_carrier: AT&T
                      network_cellular: false
                      os_name: Android
                      os_version: '10'
                      phone_numbers:
                        - '+1234567890'
                      registered_at: 1572672326
                      status: active
                      tags:
                        - 'sector:europe'
                      timezone: America/Los_Angeles
                      unit21_id: '601'
                    - app_version: 5.44.5
                      custom_data:
                        nft_asset_hash: 59790095
                        nft_copies: 2250
                        nft_creator: cryptocomnft
                        nft_creator_id: '792843'
                        nft_edition: 567
                        nft_name: The 24/7 Trader
                      device_id: 132926-18dewew6-43b3-a0bf-b1234
                      device_manufacturer: samsung
                      device_model: SM-N970U
                      device_subtype: android
                      device_type: mobile
                      entities:
                        - entity_id: userA-11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                          entity_type: user
                          unit21_id: 571485314
                      is_spooled: false
                      network_carrier: KTV
                      network_cellular: true
                      os_name: Android
                      os_version: '10'
                      phone_numbers:
                        - '+1234567890'
                      registered_at: 1572672326
                      status: active
                      tags:
                        - 'sector:korea'
                      timezone: Seoul
                      unit21_id: '436'
                  response_count: 2
                  total_count: 16
  /devices/create:
    post:
      tags:
        - Devices API
      summary: Create a device
      operationId: create_device
      description: "Creates a new device, sending device data in the request body.\n\nRecommended values for `instrument_type` include: account, crypto_address,  digital_wallet, credit_card, debit_card, gift_card, voucher, check.\n\nIf the `/devices/create` API is called for an device that already exists in our system (i.e.  has an existing `device_id`, it is treated it as an  [upsert](https://docs.unit21.ai/u21/reference/should-i-update-or-upsert) and an update on the existing device is performed. The response to the request will then contain the entry `previously_existed: true`. \n\nUnit21 selectively ignores upserts if the request is identical to a previous request.  The response to any isgnored upsert will  contain the field `ignored: true`.\n\nUpdates to an device's `device_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                            |\n  |--------------------------|----------|--------------------------------------------------------|\n  | `device_id`\t             | String   | \tUnique identifier of the device on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the device within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `device_id`) already exists |\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Devices'
              anyOf:
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/customData'
            example:
              device_id: 11b72726-18d6-43b3-a0bf-b4adf6dfd2da
              device_type: mobile
              device_subtype: android
              status: active
              registered_at: 1623365011
              os_name: Android
              os_version: 10.1.x
              app_version: 5.44.4
              device_manufacturer: samsung
              device_model: SM-N970U
              timezone: UTC-7
              network_carrier: T-Mobile
              network_cellular: true
              phone_numbers:
                - '+14159627132'
              entities:
                - entity_id: u-3593dece-6642-4cdc-8547-aafc1454e0a0
                  entity_type: user
              tags:
                - 'Sector:Europe'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createDeviceResponse'
              example:
                device_id: device-3232
                previously_existed: true
                unit21_id: '403746'
  '/devices/{unit21_id}':
    get:
      tags:
        - Devices API
      summary: Get a device
      description: >-
        Returns all data objects belonging to a single device.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the device is first created.
      operationId: get_device_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                app_version: 5.44.5
                custom_data: null
                device_id: 11b72726-18d6-43b3-a0bf-b4adf6d576474
                device_manufacturer: samsung
                device_model: SM-N970U
                device_subtype: ios
                device_type: mobile
                entities:
                  - entity_id: userA-11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                    entity_type: user
                    unit21_id: 571485314
                is_spooled: false
                network_carrier: AT&T
                network_cellular: false
                os_name: Android
                os_version: '10'
                phone_numbers:
                  - '+1234567890'
                registered_at: 1572672326
                status: active
                tags:
                  - 'sector:europe'
                timezone: America/Los_Angeles
                unit21_id: '601'
  '/{org_name}/devices/{device_id}':
    get:
      tags:
        - Devices API
      summary: Get a device using external ID
      description: >-
        Returns all data objects belonging to a single device.


        This endpoint requires the `device_id` which is a unique ID created by
        your organization to identify the device. The `org_name` is your Unit21
        appointed organization name such as `google` or `acme`.
      operationId: get_device_by_external
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                app_version: 5.44.5
                custom_data: null
                device_id: 11b72726-18d6-43b3-a0bf-b4adf6d576474
                device_manufacturer: samsung
                device_model: SM-N970U
                device_subtype: ios
                device_type: mobile
                entities:
                  - entity_id: userA-11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                    entity_type: user
                    unit21_id: 571485314
                is_spooled: false
                network_carrier: AT&T
                network_cellular: false
                os_name: Android
                os_version: '10'
                phone_numbers:
                  - '+1234567890'
                registered_at: 1572672326
                status: active
                tags:
                  - 'sector:europe'
                timezone: America/Los_Angeles
                unit21_id: '601'
  '/devices/update/{unit21_id}':
    put:
      tags:
        - Devices API
      summary: Update a device
      description: "Updates a device's information using the `unit21_id`. \n\nUpdating an device has no required fields. You MAY send any subset of the fields that the `devices/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the device is first created.\n\nNote that you can also update a device using an upsert through `/devices/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                            |\n  |--------------------------|----------|--------------------------------------------------------|\n  | `device_id`\t             | String   | \tUnique identifier of the device on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the device within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `device_id`) already exists |\n"
      operationId: update_device
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Devices'
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/digitalData'
              example:
                device_id: 11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                device_type: mobile
                device_subtype: android
                status: active
                registered_at: 1623365011
                os_name: Android
                os_version: 10.1.x
                app_version: 5.44.4
                device_manufacturer: samsung
                device_model: SM-N970U
                timezone: UTC-7
                network_carrier: T-Mobile
                network_cellular: true
                phone_numbers:
                  - '+14159627132'
                tags:
                  - 'Sector:Europe'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                device_id: 3234-sdghfdf-3332
                unit21_id: '49073'
  '/{org_name}/devices/{device_id}/update':
    put:
      tags:
        - Devices API
      summary: Update device using external ID
      description: "Updates an device's information using the `device_id` from your platform. \n\nUpdating a device has no required fields. You MAY send any  subset of the fields that the `devices/create` endpoint accepts.\n\nThis endpoint requires the `device_id` which is a unique ID created by your organization to identify the device. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.\n\nNote that you can also update a device using an upsert through `/devices/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                            |\n  |--------------------------|----------|--------------------------------------------------------|\n  | `device_id`\t             | String   | \tUnique identifier of the device on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the device within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `device_id`) already exists |"
      operationId: update_device_by_external
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Devices'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                device_id: 3234-sdghfdf-3332
                unit21_id: '49073'
  /events/list:
    post:
      tags:
        - Events API
      summary: List events
      description: >
        Returns an array of top-level information about events in your
        environment.


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        The `total_count` field contains the total number of events where the 
        `response_count` field contains the number of events included in the
        response.
      operationId: list_events
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: Successfully returned events
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listResponse'
              example:
                events:
                  - custom_data: {}
                    digital_data:
                      client_fingerprint: null
                      ip_address: null
                    general_data:
                      event_id: t-b168d85a-c660-418e-94d8-f50eeb46057d
                      event_subtype: credit_card
                      event_time: 1586950374
                      event_type: transaction
                      is_spooled: false
                      status: complete
                      tags: []
                    is_cold_store: false
                    location_data: null
                    transaction_data:
                      amount: 4646.34
                      exchange_rate: null
                      external_fee: null
                      internal_fee: null
                      received_amount: 4646.34
                      received_currency: usd
                      receiver_entity_id: u-1745d3b5-ea12-4479-ba2d-18e2e8601042
                      receiver_entity_type: user
                      receiver_instrument_id: '30504733005354'
                      receiver_source: internal
                      sender_entity_id: u-b6df7ada-d644-41ec-af0b-7d5875336712
                      sender_entity_type: user
                      sender_instrument_id: '3560510398609341'
                      sender_source: internal
                      sent_amount: 4646.34
                      sent_currency: usd
                      usd_conversion_notes: null
                    unit21_id: '2633544'
                  - custom_data: {}
                    digital_data:
                      client_fingerprint: null
                      ip_address: null
                    general_data:
                      event_id: t-9030cdce-2b43-40f1-832a-2ee264a41945
                      event_subtype: credit_card
                      event_time: 1586779444
                      event_type: transaction
                      is_spooled: false
                      status: complete
                      tags: []
                    is_cold_store: false
                    location_data: null
                    transaction_data:
                      amount: 14524.1
                      exchange_rate: null
                      external_fee: null
                      internal_fee: null
                      received_amount: 14524.1
                      received_currency: usd
                      receiver_entity_id: u-7b517e52-3324-4722-a2ff-60779d43ec6d
                      receiver_entity_type: user
                      receiver_instrument_id: i-4f88438d-1c4a-4a06-a1f0-d692c0bb4baa
                      receiver_source: internal
                      sender_entity_id: u-eca597f1-9e7f-45ca-b635-48723f60feb7
                      sender_entity_type: user
                      sender_instrument_id: i-7b977420-976f-4714-93bf-379c4dd5732f
                      sender_source: internal
                      sent_amount: 14524.1
                      sent_currency: usd
                      usd_conversion_notes: null
                    unit21_id: '2633543'
                    response_count: 2
                    total_count: 2000
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /events/create:
    post:
      tags:
        - Events API
      summary: Create an event
      operationId: create_event
      description: "Creates a new event, sending event data in the request body. \n\nTwo objects are required: `general_data` and either `transaction_data` or `action_data`. `general_data` requires the fields: `event_id`, `event_type`, and `event_time`. `transaction_data` requires only the field `amount`.\n\nUnlike entities, events on our system are cannot be explicitly updated. However, they can be  overwritten in a naive upsert-overwrite fashion. \n\nIf we receive a request to create an event for an `event_id` that already exists in our system,  we will simply overwrite that previous entry with the newly provided data if this transaction  is not already associated with other articles in our system. \n\nFor instance, if a transaction is flagged in an alert and we receive a request to overwrite  the details of this transaction, we will respond with a **409 error code** indicating that this  event cannot be overwritten.\n\nUpdates to an event's `general_data.event_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Verification options](https://docs.unit21.ai/u21/reference/identity-verification-options)\n  - [Risk scores](https://dash.readme.com/project/unit21/v1.0/refs/risk-scores)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                            |\n  |--------------------------|----------|--------------------------------------------------------|\n  | `event_id`\t             | String   | \tUnique identifier of the event on your platform      |\n  | `unit21_id`\t             | String   | \tInternal ID of the event within Unit21's system      |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `event_id`) already exists  |\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/generalEvents'
                - $ref: '#/components/schemas/transactionData'
                - $ref: '#/components/schemas/actionData'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/locationData'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/eventOptions'
              example:
                general_data:
                  event_id: t-9daaebad-478d-4ea3-bbf9-e6320d3f1cea
                  event_type: transaction
                  event_time: 1623365011
                  event_subtype: payment
                  status: active
                  device_id: 11b72726-18d6-43b3-a0bf-b4adf6dfd2da
                  parents:
                    event_id: 123
                    event_type: transaction
                  tags:
                    - 'Sector:Europe'
                transaction_data:
                  amount: 13562.83
                  sent_amount: 13562.83
                  sent_currency: USD
                  sender_entity_id: u-371b5091-da30-48a8-936b-7600f9983e80
                  sender_entity_type: user
                  sender_source: internal
                  sender_instrument_id: string
                  received_amount: 13562.83
                  received_currency: USD
                  receiver_entity_id: u-d8e1d453-c205-4996-a935-ff08be01bcd1
                  receiver_entity_type: business
                  receiver_source: internal
                  receiver_instrument_id: t376839428256371
                  exchange_rate: 1.0012
                  usd_conversion_notes: N/A
                  internal_fee: 5
                  external_fee: 5
                action_data:
                  action_type: LOGIN
                  action_details: Through mobile app v0.8.8
                  entity_id: 371c4d7b-0563-4685-aab1
                  entity_type: user
                  instrument_id: 238938823-34347686-39405443
                digital_data:
                  ip_address: 255.255.255.255
                location_data:
                  type: SHIPPING
                  building_number: 6c
                  unit_number: 22a
                  street_name: California Ave
                  city: Redmond
                  state: CA
                  postal_code: 07710-0001
                  country: US
                custom_data:
                  internal_notes: Reviewed by Mitchell on 31 June 2019
                  reviewers: 3
                  login: 1638384860
                  timestamp: '2012-03-40 05:12:41.000Z'
                  daily_email: true
                  employees:
                    - John
                    - Anna
                    - Peter
                  socure_device_session_id: '12121212121212112'
                options:
                  monitor: true
                  resolve_geoip: true
                  link_digital_data_to_entity: true
                  linked_entity: sender
                  merge_custom_data: false
                  list_merge_strategy: union
                  upsert_on_conflict: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                event_id: 40df948s-0563-aab1-4685
                unit21_id: '43245'
  '/events/{unit21_id}':
    get:
      tags:
        - Events API
      summary: Get an event
      description: >-
        Returns all data objects belonging to a single event.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the entity is first created.
      operationId: get_event_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  is_cold_store:
                    description: |
                      `true` if the event has been migrated to coldstore
                    type: boolean
                    example: false
              example:
                general_data:
                  event_id: t-b168d85a-c660-418e-94d8-f50eeb46057d
                  event_subtype: credit_card
                  event_time: 1586950374
                  event_type: transaction
                  is_spooled: false
                  status: complete
                  tags: []
                transaction_data:
                  amount: 4646.34
                  exchange_rate: null
                  external_fee: null
                  internal_fee: null
                  received_amount: 4646.34
                  received_currency: usd
                  receiver_entity_id: u-1745d3b5-ea12-4479-ba2d-18e2e8601042
                  receiver_entity_type: user
                  receiver_instrument_id: '30504733005354'
                  receiver_source: internal
                  sender_entity_id: u-b6df7ada-d644-41ec-af0b-7d5875336712
                  sender_entity_type: user
                  sender_instrument_id: '3560510398609341'
                  sender_source: internal
                  sent_amount: 4646.34
                  sent_currency: usd
                  usd_conversion_notes: null
                unit21_id: '2633544'
                custom_data: {}
                digital_data:
                  client_fingerprint: null
                  ip_address: null
                is_cold_store: false
                location_data: null
  '/{org_name}/events/{event_id}':
    get:
      tags:
        - Events API
      summary: Get an event using external ID
      description: >-
        Returns all data objects belonging to a single event.


        This endpoint requires the `events_id` which is a unique ID created by
        your organization to identify the event. The `org_name` is your Unit21
        appointed organization name such as `google` or `acme`.
      operationId: get_event_by_external
      parameters:
        - $ref: '#/components/parameters/event_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  is_cold_store:
                    description: |
                      `true` if the event has been migrated to coldstore
                    type: boolean
                    example: false
              example:
                general_data:
                  event_id: t-b168d85a-c660-418e-94d8-f50eeb46057d
                  event_subtype: credit_card
                  event_time: 1586950374
                  event_type: transaction
                  is_spooled: false
                  status: complete
                  tags: []
                transaction_data:
                  amount: 4646.34
                  exchange_rate: null
                  external_fee: null
                  internal_fee: null
                  received_amount: 4646.34
                  received_currency: usd
                  receiver_entity_id: u-1745d3b5-ea12-4479-ba2d-18e2e8601042
                  receiver_entity_type: user
                  receiver_instrument_id: '30504733005354'
                  receiver_source: internal
                  sender_entity_id: u-b6df7ada-d644-41ec-af0b-7d5875336712
                  sender_entity_type: user
                  sender_instrument_id: '3560510398609341'
                  sender_source: internal
                  sent_amount: 4646.34
                  sent_currency: usd
                  usd_conversion_notes: null
                unit21_id: '2633544'
                custom_data: {}
                digital_data:
                  client_fingerprint: null
                  ip_address: null
                is_cold_store: false
                location_data: null
  '/events/{unit21_id}/update':
    put:
      tags:
        - Events API
      summary: Update event
      description: "Updates an event's information using the `unit21_id`.\n\nUpdating an event has no required fields. You MAY send any subset of the fields that the `entities/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the event is first created.\n\nNote that you can also update an event using an upsert through `/events/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                            |\n  |--------------------------|----------|--------------------------------------------------------|\n  | `event_id`\t             | String   | \tUnique identifier of the event on your platform      |\n  | `unit21_id`\t             | String   | \tInternal ID of the event within Unit21's system      |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `event_id`) already exists  |\n"
      operationId: update_event
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/eventOptions'
              anyOf:
                - $ref: '#/components/schemas/generalEvents'
                - $ref: '#/components/schemas/transactionData'
                - $ref: '#/components/schemas/actionData'
                - $ref: '#/components/schemas/locationData'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEventResponse'
              example:
                event_id: t-9daaebad-478d-4ea3-bbf9-e6320d3f1cea
                previously_existed: true
                unit21_id: '2633581'
  '/{org_name}/events/{event_id}/update':
    put:
      tags:
        - Events API
      summary: Update event using external ID
      description: "Update an event using the `event_id` from your platform. \n\nUpdating an event has no required fields. You MAY send any  subset of the fields that the events/create endpoint accepts.\n\nThis endpoint requires the `event_id` which is a unique ID created by your organization to identify the event. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.\n\nNote that you can also update an event using an upsert through `/events/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n  | Field                    | Type     | Description                                            |\n  |--------------------------|----------|--------------------------------------------------------|\n  | `event_id`\t             | String   | \tUnique identifier of the event on your platform      |\n  | `unit21_id`\t             | String   | \tInternal ID of the event within Unit21's system      |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `event_id`) already exists  |"
      operationId: update_event_by_external
      parameters:
        - $ref: '#/components/parameters/event_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/eventOptions'
              anyOf:
                - $ref: '#/components/schemas/generalEvents'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/locationData'
                - $ref: '#/components/schemas/transactionData'
                - $ref: '#/components/schemas/actionData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                event_id: t-7d258c89-de60-4acd-acc8-db62506953d3
                unit21_id: '2633554'
  /rules/list:
    post:
      tags:
        - Rules API
      summary: List rules
      description: >-
        Returns paginated list of of top-level information about rules.     

        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        The `total_count` field contains the total number of rules where the 
        `response_count` field contains the number of rules included in the
        response.
      operationId: list_rules
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                response_count: 2
                rules:
                  - created_at: 1634336166
                    deploy_end_date: null
                    deploy_start_date: 1626307200
                    description: test
                    frequency: 1m
                    lookback_period: 365d
                    rule_type: standard
                    source: INTERNAL
                    status: ACTIVE
                    tags: []
                    title: tessst
                    unit21_id: '9097753'
                  - created_at: 1634328286
                    deploy_end_date: 1634328000
                    deploy_start_date: 1631736000
                    description: test
                    frequency: 1m
                    lookback_period: 365d
                    rule_type: standard
                    source: INTERNAL
                    status: INACTIVE
                    tags:
                      - 'account_type:market2'
                    title: test
                    unit21_id: '9097723'
                total_count: 132
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/rules/{unit21_id}':
    get:
      tags:
        - Rules API
      summary: Get a rule
      description: >-
        Returns all data objects belonging to a single rule.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the rule is first created.
      operationId: read_one_rule
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  created_at: 1634336166
                  deploy_end_date: null
                  deploy_start_date: 1626307200
                  description: test
                  frequency: 1m
                  lookback_period: 365d
                  rule_type: standard
                  source: INTERNAL
                  status: ACTIVE
                  tags: []
                  title: tessst
                  unit21_id: '9097753'
  /alerts/list:
    post:
      tags:
        - Alerts API
      summary: List alerts
      description: >
        Returns an array of top-level information about alerts in your
        environment.


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        To narrow down your alert search, we provide filter parameters to this
        endpoint. Note that all list inputs function as an "or" filter, as in
        any one of the values must match the selected alert(s):


          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `types`                 | String[]    | Must be list of alert types: `tm`, `kyc`                                                                          |
          | `created_after`         | Numeric     | Alerts created on or after this unix timestamp                                                                    |
          | `created_before`        | Numeric     | Alerts created before this unix timestamp                                                                         |
          | `dispositions`          | String[]    | List of alert disposition states (defined on an integration basis)                                                |
          | `dispositioned_after`   | Numeric     | Alerts with a disposition most recently updated after this unix timestamp                                         |
          | `dispositioned_before`  | Numeric     | Alerts with a disposition most recently updated before this unix timestamp                                        |
          | `dispositioned_by`      | String[]    | List of agent emails. Returns alerts with a disposition most recently changed by agents in the list               |
          | `rules`                 | Numeric[]   | List of Unit21 rule ids that are associated with the alert                                                        |
          | `associated_entities`   | Numeric[]   | List of Unit21 entity ids associated with this alert                                                              |
          | `associated_events`     | Numeric[]   | List of Unit21 event ids associated with this alert                                                               |
          | `associated_instruments`| Numeric[]   | List of Unit21 instrument ids associated with this alert                                                          |
          | `sources`               | String[]    | Must be list of alert sources: `INTERNAL`, `EXTERNAL`                                                             |
          | `statuses`              | String[]    | Must be list of alert statuses: `OPEN`, `CLOSED`                                                                  |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this alert with (e.g. `alert_type:high_velocity` or `alert_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned alerts. Removing unneeded options can improve response speed        |


        The `total_count` field contains the total number of alerts where the 
        `response_count` field contains the number of alerts included in the
        response.


        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)
          
      operationId: list_alerts
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/listRequest'
                - $ref: '#/components/schemas/alertListFilters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listResponse'
              example:
                alerts:
                  - alert_id: '12345'
                    alert_type: tm
                    assigned_to: person@example.com
                    created_at: 1597739123
                    custom_data: {}
                    description: Alert description
                    disposition: REJECTED
                    dispositioned_at: 1597849123
                    dispositioned_by: person@example.com
                    entities:
                      - entity_id: userA-ef3d5d41-9ac4-4071-b1fe-7dd77c80a4e8
                        entity_type: user
                        resolution: UNRESOLVED
                        unit21_id: 3789
                    events:
                      - event_id: txnBulk-11-ef3d5d41-6bc4-4070-b6ed-4dd77c90a5e8
                        event_type: transaction
                        resolution: UNRESOLVED
                        unit21_id: 98
                    instruments:
                      - instrument_id: instrument-3012850a
                        instrument_type: wallet
                        unit21_id: 427
                        resolution: UNRESOLVED
                    rules:
                      - rule_id: '123'
                        unit21_id: 456
                    source: INTERNAL
                    status: CLOSED
                    tags:
                      - 'scenario_type:blacklist'
                      - 'sameplekey:samplevalue'
                    title: Alert Title
                    unit21_id: 101
                    actions:
                      - subdispositions:
                          - subdisposition: TITLE
                            value: MISSING_DOCUMENTS
                        disposition: REJECTED
                        status_changed_to: CLOSED
                        action_time: 1597849123
                        author: person@example.com
                        disposition_notes: free form agent text describing the action/resaons
                response_count: 1
                total_count: 10
  /alerts/create:
    post:
      tags:
        - Alerts API
      summary: Create alerts
      description: "Creates a new alert, sending alert data in the request body. \nTo create an Alert, you MUST include the following fields: `alert_id`, `alert_type`, `created_at`, `title`, and `status`. The other top-level fields are optional.\n\nIf we receive a request to create an alert for an `alert_id` that already exists in our system,  we will respond with a **409 error code** indicating that this alert cannot be created/updated. You must use the `/alert/update` endpoint to update an alert.\n\nYou can add the following objects to an alert:\n\n  | Field                    | Type     | Description                                                                                                           |\n  |--------------------------|----------|-----------------------------------------------------------------------------------------------------------------------|\n  | `rules`\t                 | String[] | Unique identifier of the rules/triggers/scenarios that triggered this alert                                           |\n  | `events`\t               | Object[] | Transactions affiliated with the alert. Each object must consist of a `event_id` and `event_type` field               |\n  | `entities`\t             | Object[] | Users or businesses affiliated with the alert. Each object must consist of an `entity_id` and `entity_type` field     |\n  | `instruments`\t           | String[] | Unique identifiers of any instruments affiliated with the alert                                                       |\n\n\nPlease note that if `verification_result_id` is included, it will link the entity that is associated  with the verification result with the alert regardless of the `list_merge_strategy` provided in the `options` field.\n\nUpdates to an alert's `alert_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                             |\n  |--------------------------|----------|---------------------------------------------------------|\n  | `alert_id`\t             | String   | Unique identifier of the alert on your platform         |\n  | `unit21_id`\t             | String   | Internal ID of the alert within Unit21's system         |\n  | `previously_existed`\t   | Boolean  | If alert (with the same `alert_id`) already exists      |\n"
      operationId: create_alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Alerts'
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/eventArray'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/instrumentArray'
                - $ref: '#/components/schemas/ruleArray'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createAlertResponse'
              example:
                alert_id: alertA-028eb01a-f8d3-42fb-b398-785b596ee4cs
                previously_existed: false
                unit21_id: '36857'
  '/alerts/{unit21_id}':
    get:
      tags:
        - Alerts API
      summary: Get an alert
      description: >-
        Returns all data objects belonging to a single alert.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the entity is first created.
      operationId: get_alert_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  alert_id: null
                  alert_type: tm
                  assigned_to: null
                  created_at: 1616433282
                  custom_data: {}
                  description: >-
                    Period of no transaction activity for entity
                    u-6833a351-ae5d-4911-a2ca-715294b8ef62 from on 03-25-2020
                    09:47:54 to 04-24-2020 16:42:30
                  disposition: UNRESOLVED
                  dispositioned_at: null
                  dispositioned_by: null
                  entities:
                    - entity_id: u-6833a351-ae5d-4911-a2ca-715294b8ef62
                      entity_type: user
                      resolution: UNRESOLVED
                      unit21_id: 1237436
                  events:
                    - event_id: t-78a3561b-c9ed-4479-8e13-c8b536c44b6c
                      event_type: transaction
                      resolution: UNRESOLVED
                      unit21_id: 2631941
                    - event_id: t-67adf347-bb9d-4d5d-8086-231b9474250a
                      event_type: transaction
                      resolution: UNRESOLVED
                      unit21_id: 2632821
                    - event_id: t-c959cf38-195d-46e7-8f4c-8169de95c425
                      event_type: transaction
                      resolution: UNRESOLVED
                      unit21_id: 2632874
                    - event_id: t-699dd74d-0b5a-4471-ac18-1152a8c4aea4
                      event_type: transaction
                      resolution: UNRESOLVED
                      unit21_id: 2633014
                    - event_id: t-2d974efd-59e3-465b-a438-47a33443dbae
                      event_type: transaction
                      resolution: UNRESOLVED
                      unit21_id: 2633205
                    - event_id: t-82d9aa00-df0f-4999-b81c-84d3865eaf17
                      event_type: transaction
                      resolution: UNRESOLVED
                      unit21_id: 2633222
                  instruments: []
                  rules:
                    - rule_id: null
                      unit21_id: 17517
                  source: INTERNAL
                  status: OPEN
                  tags: []
                  title: >-
                    Rule #17517 (Account Takeover: Profile Deviation - Entities
                    that have a significant period of inactivity and resume
                    business activity with a large or high risk transaction)
                    triggered for entities:
                    u-6833a351-ae5d-4911-a2ca-715294b8ef62
                  unit21_id: '17533'
  '/alerts/{unit21_id}/update':
    put:
      tags:
        - Alerts API
      summary: Update alert
      description: "Updates an alert's information using the `unit21_id`.\n\nUpdating an alert has no required fields. You MAY send any subset of the fields that the `alerts/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the entity is first created.\n\nPlease note that if `verification_result_id` is included, it will link the entity that is associated with the  verification result with the alert regardless of the `list_merge_strategy` provided in the `options` field.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                             |\n  |--------------------------|----------|---------------------------------------------------------|\n  | `alert_id`\t             | String   | Unique identifier of the alert on your platform         |\n  | `unit21_id`\t             | String   | Internal ID of the alert within Unit21's system         |\n  | `previously_existed`\t   | Boolean  | If alert (with the same `alert_id`) already exists      |"
      operationId: update_alert
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Alerts'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  unit21_id: '8483'
                  alert_id: alertA-028eb01a-f8d3-42fb-b398-785b596ee4cb
  '/alerts/{unit21_id}/link-media':
    put:
      tags:
        - Alerts API
      summary: Add media to an alert
      description: >-
        Adds rich media objects (images, videos, etc.) to an existing alert. 


        This endpoint is useful for sending in rich media such as profile
        pictures, ID card scans, official documents etc.  that you want
        available for investigative and verification purposes.


        The payload to this endpoint can either be a **form-data** or a
        **base64** encoded media file via the requests JSON body.


        **Form-data** sent to this endpoint must use the key `media_key` and the
        `value` as the media file.  If you wish to provide optional information,
        use the `media_key` and provide stringified JSON data as the value. 
        There are no required fields in each media file's supplementary form
        data. However, if a recognized `media_type` value is provided,  the
        Unit21 system will be able to use the media object for purposes such as
        document verification.


        ```
            --form 'document_front=@/src/103031/images/document_front.jpg' \
            --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
        ```


        **Base64** encoded media objects must follow the format:


        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Drivers License",
            "media_type": "IMAGE_DRIVERS_LICENSE_FRONT",
            "custom_data": {
              "internal_notes": "Reviewed by Mitchell on 31 June 2019",
              "reviewers": 3,
              "login": 1638384860,
              "timestamp": "2012-03-40 05:12:41.000Z",
              "daily_email": true,
              "employees": ["John", "Anna", "Peter"],
              "socure_device_session_id": "12121212121212112"
            }
          }
        ```
            
        `media` and `name` are the only required fields for each media object.
        Supplementary form data is sent through the optional `custom_data`
        object.


        Recognized values of `media_type` are: 

          | media_type                  |
          |-----------------------------|
          | IMAGE_PROFILE_PICTURE       |
          | IMAGE_DRIVERS_LICENSE_FRONT |
          | IMAGE_DRIVERS_LICENSE_BACK  |
          | IMAGE_PASSPORT_FRONT        |
          | IMAGE_ID_CARD_FRONT         |
          | IMAGE_ID_CARD_BACK          |
          | IMAGE_FACE_IMAGE            |
      operationId: link_media_to_alert
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
  /cases/list:
    post:
      tags:
        - Cases API
      summary: List cases
      description: >
        Returns an array of top-level information about cases in your
        environment.


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        To narrow down your case search, we provide filter parameters to this
        endpoint. Note that all list inputs function as an "or" filter, as in
        any one of the values must match the selected case(s):


          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `created_after`         | Numeric     | Cases created on or after this unix timestamp                                                                     |
          | `created_before`        | Numeric     | Cases created before this unix timestamp                                                                          |
          | `dispositions`          | String[]    | List of case disposition states (defined on an integration basis)                                                 |
          | `dispositioned_after`   | Numeric     | Cases with a disposition most recently updated after this unix timestamp                                          |
          | `dispositioned_before`  | Numeric     | Cases with a disposition most recently updated before this unix timestamp                                         |
          | `dispositioned_by`      | String[]    | List of agent emails. Returns alerts with a disposition most recently changed by agents in the list               |
          | `rules`                 | Numeric[]   | List of Unit21 rule ids that are associated with the case                                                         |
          | `associated_entities`   | Numeric[]   | List of Unit21 entity ids associated with this case                                                               |
          | `associated_events`     | Numeric[]   | List of Unit21 event ids associated with this case                                                                |
          | `associated_alerts`     | Numeric[]   | List of Unit21 alert ids associated with this case                                                                |
          | `sources`               | String[]    | Must be list of alert sources: `INTERNAL`, `EXTERNAL`                                                             |
          | `statuses`              | String[]    | Must be list of alert statuses: `OPEN`, `CLOSED`                                                                  |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this case with (e.g. `case_type:high_velocity` or `case_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned cases. Removing unneeded options can improve response speed         |


        The `total_count` field contains the total number of case where the 
        `response_count` field contains the number of cases included in the
        response.


        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)
          
      operationId: list_cases
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/listRequest'
                - $ref: '#/components/schemas/caseListFilters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listResponse'
              example:
                cases:
                  - alerts: []
                    assigned_to: john@example.com
                    case_id: null
                    created_at: 1616433161
                    custom_data: {}
                    description: Test Case Description
                    disposition: UNRESOLVED
                    dispositioned_at: null
                    dispositioned_by: null
                    entities: []
                    events: []
                    source: INTERNAL
                    status: OPEN
                    tags: []
                    title: Test Case
                    unit21_id: '17529'
                response_count: 1
                total_count: 13
  /cases/create:
    post:
      tags:
        - Cases API
      summary: Create a case
      description: "Creates a new case, sending case data in the request body. \nTo create an case, you MUST include the following fields: `case_id`, `title`, and `created_at`.  The other top-level fields are optional.\n\nIf we receive a request to create a case for an `case_id` that already exists in our system,  we will respond with a **409 error code** indicating that this case cannot be created/updated. You must use the `/case/update` endpoint to update a case.\n\nYou can add the following objects to an alert:\n\n  | Field                    | Type     | Description                                                                                                           |\n  |--------------------------|----------|-----------------------------------------------------------------------------------------------------------------------|\n  | `rules`\t                 | String[] | Unique identifier of the rules/triggers/scenarios that triggered this alert                                           |\n  | `events`\t               | Object[] | Transactions affiliated with the alert. Each object must consist of a `event_id` and `event_type` field               |\n  | `entities`\t             | Object[] | Users or businesses affiliated with the alert. Each object must consist of an `entity_id` and `entity_type` field     |\n  | `instruments`\t           | String[] | Unique identifiers of any instruments affiliated with the alert                                                       |\n\n\nUpdates to an cases's `case_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                          |\n  |--------------------------|----------|------------------------------------------------------|\n  | `case_id`\t               | String   | \tUnique identifier of the case on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the case within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf alert (with the same `case_id`) already exists  |\n"
      operationId: create_case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Cases'
                - $ref: '#/components/schemas/entityArray'
                - $ref: '#/components/schemas/eventArray'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCaseResponse'
              example:
                case_id: CaseA-1234
                previously_existed: false
                unit21_id: '36858'
  '/cases/{unit21_id}':
    get:
      tags:
        - Cases API
      summary: Get a case
      description: >-
        Returns all data objects belonging to a single case.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the case is first created.
      operationId: get_case_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  alerts: []
                  assigned_to: Alf@example.com
                  case_id: null
                  created_at: 1616433161
                  custom_data: {}
                  description: Test Case Description
                  disposition: UNRESOLVED
                  dispositioned_at: null
                  dispositioned_by: null
                  entities: []
                  events: []
                  source: INTERNAL
                  status: OPEN
                  tags: []
                  title: Test Case
                  unit21_id: '17529'
  '/cases/{unit21_id}/update':
    put:
      tags:
        - Cases API
      summary: Update case
      description: "Update a case through its `unit21_id`.\n    \n\nUpdating a case has no required fields. You MAY send any subset of the fields that the `cases/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the case is first created.\n\nNote that you can also update an alert using an upsert through `/cases/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/u21/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/u21/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/u21/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                          |\n  |--------------------------|----------|------------------------------------------------------|\n  | `case_id`\t               | String   | \tUnique identifier of the case on your platform     |\n  | `unit21_id`\t             | String   | \tInternal ID of the case within Unit21's system     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `case_id`) already exists |"
      operationId: update_case
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Cases'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  unit21_id: '8483'
                  case_id: caseA-123
  '/cases/{unit21_id}/link-media':
    put:
      tags:
        - Cases API
      summary: Add media to an case
      description: >-
        Adds rich media objects (images, videos, etc.) to an existing case. 


        This endpoint is useful for sending in rich media such as profile
        pictures, ID card scans, official documents etc.  that you want
        available for investigative and verification purposes.


        The payload to this endpoint can either be a **form-data** or a
        **base64** encoded media file via the requests JSON body.


        **Form-data** sent to this endpoint must use the key `media_key` and the
        `value` as the media file.  If you wish to provide optional information,
        use the `media_key` and provide stringified JSON data as the value. 
        There are no required fields in each media file's supplementary form
        data. However, if a recognized `media_type` value is provided,  the
        Unit21 system will be able to use the media object for purposes such as
        document verification.


        ```
            --form 'document_front=@/src/103031/images/document_front.jpg' \
            --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
        ```


        **Base64** encoded media objects must follow the format:


        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Drivers License",
            "media_type": "IMAGE_DRIVERS_LICENSE_FRONT",
            "custom_data": {
              "internal_notes": "Reviewed by Mitchell on 31 June 2019",
              "reviewers": 3,
              "login": 1638384860,
              "timestamp": "2012-03-40 05:12:41.000Z",
              "daily_email": true,
              "employees": ["John", "Anna", "Peter"],
              "socure_device_session_id": "12121212121212112"
            }
          }
        ```
            
        `media` and `name` are the only required fields for each media object.
        Supplementary form data is sent through the optional `custom_data`
        object.


        Recognized values of `media_type` are: 

          | media_type                    |
          |-------------------------------|
          | IMAGE_PROFILE_PICTURE         |
          | IMAGE_DRIVERS_LICENSE_FRONT   |
          | IMAGE_DRIVERS_LICENSE_BACK    |
          | IMAGE_PASSPORT_FRONT          |
          | IMAGE_ID_CARD_FRONT           |
          | IMAGE_ID_CARD_BACK            |
          | IMAGE_FACE_IMAGE              |
      operationId: link_media_to_case
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  unit21_id: '1423'
                  case_id: caseA-123
  /sars/list:
    post:
      tags:
        - Sars API
      summary: List sars
      description: >-
        Returns paginated list of of top-level information about
        paths/sars@list.yaml    


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        To narrow down your sars search, we provide filter parameters to this
        endpoint. Note that all list inputs function as an "or" filter, as in
        any one of the values must match the selected sar(s):


          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `created_after`         | Numeric     | SARs created on or after this unix timestamp                                                                      |
          | `created_before`        | Numeric     | SARs created before this unix timestamp                                                                           |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this SARs with (e.g. `sars_type:high_velocity` or `sars_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned SARs. Removing unneeded options can improve response speed          |


        The `total_count` field contains the total number of sars where the 
        `response_count` field contains the number of sars included in the
        response.


        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/u21/reference/endpoint-options)
          
      operationId: list_sars
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                response_count: 2
                sars:
                  - amount_volume: 0
                    created_at: 1578622336
                    created_by: Clarence Chio
                    description: ''
                    entities: []
                    events: []
                    filing_type: Initial report
                    lock: ''
                    name: ''
                    report_type: FINCEN_SAR
                    status: PREFILING_VALIDATION_PENDING
                    status_updated_at: 1597948038
                    submitted: false
                    submitted_at: N/A
                    tags: []
                    txn_count: 0
                    unit21_id: 5
                    updated_at: 1623283105
                  - amount_volume: 0
                    created_at: 1582233696
                    created_by: Tyler Allen
                    description: lkigkhjbjhbkjhbk
                    entities:
                      - entity_id: userA-c1e9dcca-e46a-42e9-bb9e-2208e30e49da
                        entity_type: user
                        unit21_id: 23518
                    events:
                      - event_id: txnBulk-11-9d67f84f-f232-41ec-bf77-f37fe8adfdb0
                        event_type: transaction
                        unit21_id: 14519
                      - event_id: txnBulk-12-9d67f84f-f232-41ec-bf77-f37fe8adfdb0
                        event_type: transaction
                        unit21_id: 14520
                      - event_id: txnBulk-11-3018aa2f-f91f-4dad-9a03-ac5b1b91fa11
                        event_type: transaction
                        unit21_id: 14581
                      - event_id: txnBulk-12-3018aa2f-f91f-4dad-9a03-ac5b1b91fa11
                        event_type: transaction
                        unit21_id: 14582
                    filing_type: Initial report
                    lock: 'False'
                    name: jghvkjhgkv
                    report_type: FINCEN_SAR
                    status: PREFILING_VALIDATION_PENDING
                    status_updated_at: 1585937927
                    submitted: false
                    submitted_at: N/A
                    tags: []
                    txn_count: 0
                    unit21_id: 93
                    updated_at: 1623283105
                total_count: 651
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/sars/{unit21_id}':
    get:
      tags:
        - Sars API
      summary: Get a sars
      description: >-
        Returns all data objects belonging to a single SAR.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the sar is first created.
      operationId: read_one_sar
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  amount_volume: 0
                  created_at: 1583869433
                  created_by: Zach Porteous
                  description: case-2
                  entities: []
                  events: []
                  filing_type: Initial report
                  lock: 'False'
                  name: case-2
                  report_type: FINCEN_SAR
                  status: PREFILING_VALIDATION_PENDING
                  status_updated_at: 1583869435
                  submitted: false
                  submitted_at: N/A
                  tags: []
                  txn_count: 0
                  unit21_id: 2966
                  updated_at: 1623283105
  '/entities/{unit21_id}/verify':
    post:
      tags:
        - Entity Verification API
      summary: Verify an entity
      description: >
        Run a verification workflow on an entity. Requires a `workflow_id`. You
        can create a verification workflow from the Unit21 dashboard. To see
        how, review [this help
        article](https://docs.unit21.ai/dashboard/docs/kyc-verification-workflow).
      operationId: run_verification_workflow
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entityVerification'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_action:
                    type: string
                    description: >-
                      The end result of the workflow, one of a set of end
                      results defined by the workflow
                  is_success:
                    type: boolean
                    description: >-
                      Whether or not the workflow successful completed.
                      Workflows rely on external services, which may at times
                      fail
                  results:
                    type: object
                    description: >-
                      Object mapping from the executed verifications (e.g.
                      IDOLOGY:DOC_VERIFICATION)
                  full_response:
                    type: object
                    description: >-
                      The raw response from the verification provider. Contents
                      depend on the verification source and type.
              example:
                end_action: $REJECT
                is_success: true
                results:
                  'IDOLOGY:DOC_VERIFICATION':
                    parsed_result: CAPTURE_NOT_APPROVED
                    verification_result_id: 73
                  'IDOLOGY:ID_VERIFICATION':
                    parsed_result: ID_NON_MATCH
                    verification_result_id: 71
                  'IDOLOGY:WATCHLIST_SCREENING':
                    parsed_result: NO_RESTRICTION
                    verification_result_id: 72
                full_response:
                  info: This response depends on the verification source
  '/entities/{unit21_id}/link-verification-result':
    post:
      tags:
        - Entity Verification API
      summary: Link external verification
      description: >-
        Add the verification result from an external ID provider to an entity on
        the Unit21 system.

        You can only send 1 result per request.
      operationId: add_verification_result_to_entity
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkVerificationResult'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkVerificationResponse'
              example:
                created_at: 1591992745
                entity_id: '856'
                source: IDOLOGY
                type: DOC_VERIFICATION
                verification_workflow_execution_id: 59
                full_response:
                  info: This response depends on the verification source
                  placeholderKey: placeholderValue
  '/verification/result/{workflow_id}':
    get:
      tags:
        - Entity Verification API
      summary: Get verification results
      description: >-
        Returns all the information from the verification workflow execution for
        a specific entity.
      operationId: get_verification_result
      parameters:
        - $ref: '#/components/parameters/workflow_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                created_at: 1591992745
                entity_id: 856
                source: IDOLOGY
                type: DOC_VERIFICATION
                verification_workflow_execution_id: 59
                full_response: {}
  '/entities/{unit21_id}/continuous-monitoring':
    post:
      tags:
        - Entity Verification API
      summary: Update continuous monitoring
      description: >
        Fetch status and enables/disables Socure continuous monitoring for an
        entity.
      operationId: update_continuous_monitoring
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/continuousMonitoring'
      responses:
        '200':
          description: OK
  '/entities/{unit21_id}/suppress-provider-entity':
    post:
      tags:
        - Entity Verification API
      summary: Suppress provider entity
      description: >
        Mute Socure continuous monitoring for an entity. 1 - Suppress 0 -
        Unsuppress
      operationId: update_suppressed_provider_entities
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/suppressProviderEntity'
      responses:
        '200':
          description: OK
  /agents/list:
    get:
      tags:
        - Agents API
      summary: List agents
      description: >-
        Returns an array of all agents in your organization who are using the
        environment.

        There are no options or filters for this endpoint. The request will
        return ALL agents.
      operationId: list_agents
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                - created_at: 1616432959
                  email: Sallyallen@example.com
                  full_name: Sally Allen
                  status: ACTIVE
                - created_at: 1613604175
                  email: JhonStrod@example.com
                  full_name: Jhon Strod
                  status: ACTIVE
  '/agents/{agent_email}/deactivate':
    put:
      tags:
        - Agents API
      summary: Deactivate an agent
      description: Updates an alert's information using the `unit21_id`.
      operationId: deactivate_agent
      parameters:
        - $ref: '#/components/parameters/agent_email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  created_at: 1580423336
                  email: nick@unit21.ai
                  full_name: Nick Miller
                  status: INACTIVE
  /verification-forms/create:
    post:
      tags:
        - Verification Forms API
      summary: Verification Forms API
      description: >-
        If you are verifying IDs and collecting user data, this endpoint creates
        a temporary URL to which you can redirect users.
      operationId: create_verification_form
      requestBody:
        required: true
        description: Set session length. Not required.
        content:
          application/json:
            schema:
              type: object
              properties:
                session_length_minutes:
                  type: integer
                  description: >
                    Time in minutes that form will be valid. Once this expires,
                    the user can no longer submit or view the form. Max is 10080
                    minutes (one week). Default is 1440 minutes (one day)
                  minimum: 1
                  maximum: 10080
                  default: 1440
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_to:
                    type: string
                    format: URL
                    description: URL to redirect users to fill out form
  /tag-associations/list:
    post:
      tags:
        - Tag Associations API
      summary: List tags
      description: >
        Returns an array of objects associated with a set of tags in your
        environment.     


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 1000)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        To narrow down your tag association search, we provide filter parameters
        to this endpoint.

          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `created_after`         | Numeric     | Tag associations created on or after this unix timestamp                                                          |
          | `created_before`        | Numeric     | Tag associations created before this unix timestamp                                                               |
          | `object_types`          | String[]    | List of object types to match against. Supported values are `alert`, `case`, `sar`, `rule`, `agent`, `event`, `entity`, and `instrument`. Specifying [`entity`, `alert`] means that we will only match against tags associated with entities and alerts in the system, and will not return results of tags associated with rules, events etc. If more than one value is provided to `object_types` and `object_id` is specified, an error will be thrown.     |
          | `object_id`             | String      | String representing the unit21 ID of the object you want to get tag associations for. If this is specified and `object_types` contains more than one value, an error will be thrown.                    |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this case with (e.g. `case_type:high_velocity` or `case_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned cases. Removing unneeded options can improve response speed         |


        The `total_count` field contains the total number of tags where the 
        `response_count` field contains the number of tags included in the
        response.
      operationId: list_tags
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/listRequest'
                - $ref: '#/components/schemas/tagFilters'
              example:
                created_after: 1597198562
                created_before: 1598481792
                object_types:
                  - entity
                  - event
                  - instrument
                  - alert
                  - case
                  - sar
                  - agent
                  - rule
                tag_filters:
                  - 'type:aml'
                  - account_type
                limit: 1000
                offset: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                tag_associations:
                  - created_at: 1598405517
                    object_id: '351906'
                    object_type: alert
                    tag: 'account_type:market2'
                  - created_at: 1598398976
                    object_id: '351786'
                    object_type: alert
                    tag: 'account_type:market2'
                  - created_at: 1598382408
                    object_id: '346310'
                    object_type: entity
                    tag: 'type:aml'
                response_count: 2
                total_count: 29361
  '/webhooks/{unit21_id}/update':
    put:
      tags:
        - Webhooks API
      summary: Update webhook URL
      description: >-
        Change the URL of an existing webhook from Unit21.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the webhook is first created.
      operationId: update_webhook
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: URL
                  description: The URL that you want to send the webhook too.
                  example: 'https://example.com'
      responses:
        '200':
          description: OK
  /blacklists/list:
    post:
      tags:
        - Blacklists API
      summary: List blacklists
      description: >
        Returns an array of blacklist in your environment. 


        Because the response is paginated, the request body has a `limit` and
        `offset` field. At least one must be filled.

        * `limit`  indicates how many objects the request returns (the page
        maximum is 50)

        * `offset` indicates the offset for pagination. An `offset` value of 1
        starts with the environment's first record.


        The `total_count` field contains the total number of blacklists where
        the  `response_count` field contains the number of blacklists included
        in the response.
      operationId: list_blacklists
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listResponse'
                example:
                  blacklists:
                    - unit21_id: '9'
                      name: Full IP address blacklist A
                      description: Internal blacklist of errant IP addresses
                      type: IP_INET
                      created_at: 1594219333
                  response_count: 10
                  total_count: 100
  /blacklists/create:
    post:
      tags:
        - Blacklists API
      summary: Create a blacklist
      description: "Create a new blacklist sending blacklist data in the request body. \n\nUnit21 currently supports 5 types of blacklists:\n\n  * `STRING`: Plain strings to match against any text-type field.\n  * `IP_INET`: IPv4 or IPv6 IP addresses to blacklist.\n  * `IP_CIDR`: [Classless Inter-Domain Routing (CIDR) notation IP address ranges](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) to blacklist, \n  * `USER`: Series of fields that a Unit21 user entity will be matched against.\n  * `BUSINESS`: Series of fields that a Unit21 business entity will be matched against.\n\n\nIf the `/blacklists/create` API is called multiple times, it will create a new blacklist each time.  This endpoint does not support updates/upserts.\n\nThis endpoint does not support batch uploads.\n\nThe response will consist of the following fields:\n\n  | Field           | Type     | Description                                           |\n  |-----------------|----------|-------------------------------------------------------|\n  | `blacklist_id`  | String   | \tUnique identifier of the entity on your platform     |\n"
      operationId: create_blacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBlacklist'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example:
                  blacklist_id: '9'
  '/blacklists/{unit21_id}/add-values':
    post:
      tags:
        - Blacklists API
      summary: Add items to a blacklist
      description: "Add items to a blacklist, according to the blacklist's `type`.\n\nEach request must specify at least **1** object to blacklist. You may add up to **100**  values to an existing blacklist at once.\n\nThe `/blacklists/<blacklist-id>/add-values` API will ignore entries provided that already exist  in the blacklist. No error will be thrown when this occurs.\n\nThe response will consist of the following fields:\n\n  | Type       | Description                                                              | Example                           |\n  |------------|--------------------------------------------------------------------------|-----------------------------------|\n  | `STRING`\t | Plain strings to match against any text-type field.                      | \t\t\"blacklist_value\": \"abcde\"    |\n  | `IP_INET`\t | IPv4 or IPv6 IP addresses to blacklist.                                  | \t\"ip_address\": \"255.255.255.255\" |\n  | `IP_CIDR`\t | Classless Inter-Domain Routing (CIDR) [notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) IP address ranges to blacklist.  | \t\"cidr\": \"255.255.255.255/32\" |\n  | `USER`\t   | \tSeries of fields that a Unit21 user entity will be matched against.     | \tuser_data object                |\n  | `BUSINESS` | Series of fields that a Unit21 business entity will be matched against.  | \tbusiness_data object            |\n"
      operationId: add_blacklist_values
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/blacklistUser'
                - $ref: '#/components/schemas/blacklistBusiness'
                - $ref: '#/components/schemas/blacklistINET'
                - $ref: '#/components/schemas/blacklistCIDR'
                - $ref: '#/components/schemas/blacklistString'
      responses:
        '200':
          description: OK
  /datafiles/create:
    post:
      tags:
        - Datafiles API
      operationId: create_datafiles
      summary: Upload datafiles
      description: >
        Bulk upload multiple objects of the same type. Can be entities, events,
        or instruments.


        Only one file can be uploaded in a request, with a file size maximum of
        30 MB (megabytes). Please add a waiting time of two seconds between
        requests.


        Use `--form datafile` to specify the datafile, and `run_rules` to
        configure whether to run Unit21 rules on the datafile after it's
        processed.


        We support JSON format only.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                datafile:
                  type: string
                  format: binary
                  description: Path to datafile
                run_rules:
                  type: boolean
                  description: Whether to run U21 rules on the datafile after processing
      responses:
        '200':
          description: OK
          content:
            applicationjson:
              example:
                file_name: file1.txt
                unit21_id: 440
  '/datafiles/{unit21_id}':
    get:
      tags:
        - Datafiles API
      operationId: get_datafile_by_unit21_id
      summary: Get datafile
      description: >-
        Get details about a datafile.


        This endpoint requires the `unit21_id` which is a unique ID created by
        Unit21 when the datafile is first created.
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                file_name: <filename>
                status: VALIDATION_PENDING
                unit21_id: <unit21_id>
                uploaded_at: '2020-06-01 01:42:07'
                uploaded_by: jsmith@email.com
                entity_count: 123
                event_count: 123
                instrument_count: 123
  '/datafiles/{unit21_id}/mappings':
    post:
      tags:
        - Datafiles API
      operationId: get_datafile_mappings
      summary: Retrieve datafile mappings
      description: >
        Retrieve datafile mapping of objects uploaded with a datafile. 


        Includes 3 arrays: entities, events, instruments. Each list is limited
        to a maximum of 500 items. 


        The total number of items can be retrieved from the GET endpoint.


        Please note that an empty response `{}` will be returned if the datafile
        is not yet processed.
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                offset:
                  type: integer
                  description: offset for pagination
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                entity_list:
                  - entity_id: external_id_123
                    unit21_id: 82
                  - entity_id: external_id_222
                    unit21_id: 80
                event_list:
                  - event_id: 721-id
                    unit21_id: 49
                instrument_list:
                  - instrument_id: BTC-123
                    unit21_id: 10
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: u21-key
  schemas:
    listRequest:
      type: object
      properties:
        limit:
          type: integer
          description: Number of objects per page.
          minimum: 0
          maximum: 50
          example: 2
        offset:
          type: integer
          description: >-
            Pagination offset. A value of 1 returns a response beginning with
            the first record.
          minimum: 1
          default: 1
    entityId:
      type: string
      description: >-
        The unique identifier for an entity, as defined on _your_ platform.
        Entity IDs must only comprise of the characters
        -_:.@a-zA-Z0-9!#$%&*+/=?^`{
      minLength: 1
      maxLength: 128
      example: u-3593dece-6642-4cdc-8547-aafc1454e0a0
    entityType:
      type: string
      enum:
        - user
        - business
      description: MUST be either `user` or `business`
    entitySubtype:
      type: string
      description: >
        Extra information how your organization classifies the entity. You MAY
        enter any value.
      maxLength: 128
      example: contractor
    objectStatus:
      type: string
      description: Status of the object on your system. You MAY enter any string value.
      maxLength: 128
      example: active
    registeredAt:
      type: integer
      description: >-
        Date in seconds since 1 Jan 1970 00:00:00 UTC (i.e. in [Unix
        time](https://en.wikipedia.org/wiki/Unix_time)).
      example: 1623365011
    Tags:
      type: array
      description: >-
        List of string tags, in the format `keyString:valueString` (note that
        the Key strings are NOT enclosed in `"`)
      items:
        type: string
        format: key-value pair
        example: 'Sector:Europe'
    generalEntitiesProperties:
      title: General entity data
      type: object
      description: >-
        General information about the entity. With this object, you can link any
        entity on Unit21's system to a user or business on your platform.
      required:
        - entity_id
        - entity_type
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        entity_type:
          $ref: '#/components/schemas/entityType'
        entity_subtype:
          $ref: '#/components/schemas/entitySubtype'
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parents:
          type: array
          description: >-
            The parent object consists of two fields─`entity_id` for parent
            unique identifier  and `entity_type`.
          items:
            type: object
            properties:
              entity_id:
                type: string
                description: Parent unique identifier
                maxLength: 128
                example: entity-5500
              entity_type:
                $ref: '#/components/schemas/entityType'
        tags:
          $ref: '#/components/schemas/Tags'
    userDataProperties:
      title: User Data
      type: object
      description: >
        Personal data - name, birthday, SSN etc. If `general_data.entity_type ==
        user`,  this field is required. However, none of the fields in user_data
        are required. You may send in an empty array: `"user_data": {}`.
      properties:
        first_name:
          type: string
          description: User's associated first name
          maxLength: 128
          example: John
        middle_name:
          type: string
          description: User's associated middle name
          maxLength: 128
          example: Joseph
        last_name:
          type: string
          description: User's associated last name
          maxLength: 128
          example: Smith
        day_of_birth:
          type: integer
          description: Day of user's date of birth (e.g. 23)
          example: 23
        month_of_birth:
          type: integer
          description: Month of user's date of birth (e.g. 12 for December)
          example: 12
        year_of_birth:
          type: integer
          description: Year of the user's date of birth (e.g. 1990)
          example: 1990
        gender:
          type: string
          description: 'MALE, FEMALE, or OTHER'
          enum:
            - male
            - female
            - other
          example: female
        ssn:
          type: string
          pattern: '^\d{3}-\d{2}-\d{4}$'
          description: 'Social security number of the user, in the format xxx-xx-xxxx'
          maxLength: 64
          example: 733-99-5921
    State:
      type: string
      description: >-
        For the US, use the two letter state codes. Otherwise, use the country
        and regional subdivision codes. Codes are based on the [ISO 3166-1
        alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
      maxLength: 128
      example: CA
    documentDataProperties:
      type: object
      description: document data properties
      required:
        - document_id
        - document_type
      properties:
        document_id:
          type: string
          description: The id or number of the document
          maxLength: 128
          example: G3352403F
        document_type:
          type: string
          description: The type of the document (i.e. drivers license)
          maxLength: 128
          example: drivers_license
        state:
          $ref: '#/components/schemas/State'
        country:
          type: string
          description: >-
            provided acording to the [ISO 3166-1 alpha-2
            standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2].
          maxLength: 128
          example: US
        issued_at:
          type: integer
          description: >-
            Date when document was created, in seconds since 1 Jan 1970 00:00:00
            UTC (i.e. in [Unix time](https://en.wikipedia.org/wiki/Unix_time))".
          example: 1572673226
        expires_at:
          type: integer
          description: >-
            Date when document expires, in seconds since 1 Jan 1970 00:00:00 UTC
            (i.e. in [Unix time](https://en.wikipedia.org/wiki/Unix_time))".
          example: 1572673227
    documentDataArrayProperties:
      title: Document data array
      description: array of document data objects
      type: array
      items:
        $ref: '#/components/schemas/documentDataProperties'
    deviceId:
      type: string
      description: Identifier of the device within your system
      example: 11b72726-18d6-43b3-a0bf-b4adf6dfd2da
      minLength: 1
      maxLength: 128
    instrumentsArrayProperties:
      title: Instruments array
      description: array of instrument ids as string
      type: array
      items:
        $ref: '#/components/schemas/deviceId'
    phoneNumbers:
      type: array
      description: >-
        List of phone numbers associated with the entity in [E.164
        format](https://en.wikipedia.org/wiki/E.164)─e.g. +12125551395 (
        '[+][country code][area code][local phone number]' )
      items:
        type: string
        example: '+14159627132'
    communicationDataProperties:
      title: Communication Data
      type: object
      description: >-
        An entity's associated means of communication, like emails and phone
        numbers.
      properties:
        email_addresses:
          type: array
          description: List of emails associated with an entity.
          items:
            type: string
            example: JohnJay@example.com
        phone_numbers:
          $ref: '#/components/schemas/phoneNumbers'
    ipAddressSimple:
      title: IP address
      type: string
      description: Either IPv4 or IPv6
      maxLength: 128
      example: 255.255.255.255
    ipAddressExtended:
      title: Extended IP address
      properties:
        ip_address:
          $ref: '#/components/schemas/ipAddressSimple'
        first_seen:
          $ref: '#/components/schemas/registeredAt'
        last_seen:
          $ref: '#/components/schemas/registeredAt'
    digitalDataArrayProperties:
      title: Digital Data
      description: 'Associated digital properties - IP, device, browser, client info etc.'
      type: object
      properties:
        ip_addresses:
          type: array
          description: List of IP addresses. MUST be in either IPv4 or IPv6 format.
          items:
            $ref: '#/components/schemas/ipAddressExtended'
        client_fingerprints:
          type: array
          description: Fingerprints associated with this entity.
          items:
            type: string
            example: 4908hsdfknkd90432nj3k2kj2jk23kj2k3jk2j3
    City:
      type: string
      description: Associated city (max 128 characters)
      maxLength: 128
      example: Redmond
    zipCode:
      type: string
      description: >-
        Associated ZIP code or postal code. For US addresses, can be either
        5-digit ZIP Code (99999) or ZIP+4 Code (99999-9999) formats
      example: 07710-0001
    Country:
      type: string
      description: >-
        Country of primary residence, provided acording to the [ISO 3166-1
        alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2].
      maxLength: 2
      example: US
    locationDataProperties:
      title: location data properties
      type: object
      description: Address/location data
      properties:
        type:
          type: string
          description: >-
            A string field indicating the type of address e.g. `SHIPPING`,
            `BILLING` (max 24 characters)
          maxLength: 24
          example: SHIPPING
        building_number:
          type: string
          description: Building number of the primary residence (max 24 characters)
          maxLength: 24
          example: 6c
        unit_number:
          type: string
          description: >-
            Flat/unit/apartment number of the location associated with the event
            (max 24 characters)
          maxLength: 24
          example: 22a
        street_name:
          type: string
          description: Street name of primary residence (max 128 characters)
          maxLength: 128
          example: California Ave
        city:
          $ref: '#/components/schemas/City'
        state:
          $ref: '#/components/schemas/State'
        postal_code:
          $ref: '#/components/schemas/zipCode'
        country:
          $ref: '#/components/schemas/Country'
    locationDataArrayProperties:
      title: Location data array
      description: array of location data objects
      type: array
      items:
        $ref: '#/components/schemas/locationDataProperties'
    riskScoresProperties:
      title: Risk Scores
      required:
        - name
        - score
      type: object
      description: Third party risk score information
      properties:
        name:
          type: string
          description: Name of risk score
          example: risk_score1
        score:
          type: integer
          description: Risk Value assigned to entity
          example: 65
        denominator:
          type: integer
          description: >
            Number by which `score`can be divided. If no value is given, Unit21
            sets the denominator as 10^n, where `n`is the number of characters
            in the value. E.G. a value of 50 has a denominator of 10², a value
            of 501 has a denominator of 10³.
          example: 100
    workflowId:
      type: string
      description: |
        A unique identifier defined during workflow creation. **Default**: none
      example: sanctions_check_1
    synchronousResponse:
      type: boolean
      description: >-
        **Default**: `false`. If `true`,  the APU immediately executes the
        workflow, and sends the verification result with the API response. If
        `true` and the workflow doesn't allow synchronous responses, the API
        returns an error([this can be configured in the
        UI](https://docs.unit21.ai/dashboard/docs/kyc-verification-workflow)).

        **Note**: Using synchronous calls may cause the API to return a `423`
        error. If that happens, try switching `synchronous_response` to `false`.
      default: false
      example: false
    includeFullResponse:
      type: boolean
      description: >-
        Include the full, raw, verification results. Can be used only if
        `synchronous_response` is `true`.
         **Default**: `false`
      default: false
    resolveGeoIp:
      type: boolean
      description: >-
        If `false`, does not resolve the geographic location from the provided
        IP. If `true` and `digital_data.ip_addresses` is empty, Unit21 ignores
        the field. **Default**: `true`
      default: true
      example: true
    merge_custom_data:
      type: boolean
      description: >-
        Only relevant for updates/upserts, ignored otherwise. See [custom data
        merge
        strategy](doc:how-data-merges-on-updates#custom-data-merge-strategy) for
        more details. **Default**: `false`
      default: false
    listMergeStrategy:
      type: string
      enum:
        - union
        - replace
        - difference
      description: >
        Relevant only for list updates/upserts, ignored otherwise. `union` adds
        values that did not exist. `replace` overwrites the old values with the
        new values. `difference` removes the values you send(provided they
        already existed on the system). See the [list-merge-strategy
        section](doc:how-data-merges-on-updates#arrays-merged-using-optionslist_merge_strategy)
        for more details. **Default**: `union`
      default: union
    upsertOnConflict:
      type: boolean
      description: >-
        If POST request includes an object that already exists when 
        `upsert_on_conflict` is `false`, API returns a 409 error code and the
        object is not overwritten. **Default**: `true`
      default: true
      example: true
    entityOptionsProperties:
      title: Entity Options
      type: object
      description: Options for specifying workflows and list merge strategies.
      properties:
        identity_verifications:
          type: object
          properties:
            workflow_id:
              $ref: '#/components/schemas/workflowId'
            run_verifications:
              type: boolean
              description: >-
                Whether or not to execute a verification workflow for the
                uploaded entity/entities. **Default**: `false`
              default: false
              example: false
            synchronous_response:
              $ref: '#/components/schemas/synchronousResponse'
            include_full_response:
              $ref: '#/components/schemas/includeFullResponse'
        resolve_geoip:
          $ref: '#/components/schemas/resolveGeoIp'
        merge_custom_data:
          $ref: '#/components/schemas/merge_custom_data'
        list_merge_strategy:
          $ref: '#/components/schemas/listMergeStrategy'
        upsert_on_conflict:
          $ref: '#/components/schemas/upsertOnConflict'
    customDataProperties:
      title: custom_data
      type: object
      description: >-
        Any custom information that you wish our system to associate with this
        object  (accepts any valid JSON object -- a key:value format --
        `string:object`,  `string:string`, `string:number`, `string:array`,
        `string:boolean`, `string:null`)
      example:
        internal_notes: Reviewed by Mitchell on 31 June 2019
        reviewers: 3
        login: 1638384860
        timestamp: '2012-03-40 05:12:41.000Z'
        daily_email: true
        employees:
          - John
          - Anna
          - Peter
        socure_device_session_id: '12121212121212112'
      additionalProperties: true
    createUser:
      title: Create a user
      required:
        - general_data
        - user_data
      properties:
        general_data:
          $ref: '#/components/schemas/generalEntitiesProperties'
        user_data:
          $ref: '#/components/schemas/userDataProperties'
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
        instrument_ids:
          $ref: '#/components/schemas/instrumentsArrayProperties'
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        risk_scores:
          type: array
          description: Set of `risk scores`
          items:
            $ref: '#/components/schemas/riskScoresProperties'
        options:
          $ref: '#/components/schemas/entityOptionsProperties'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
    businessName:
      type: string
      description: The registered name of the business
      maxLength: 128
      example: Acme
    corporateTaxId:
      type: string
      description: The TIN/EIN of the business
      maxLength: 128
      example: 434-455-3166
    dbaName:
      type: string
      description: Operating name of the business.
      maxLength: 512
      example: Global Liquids
    businessDataProperties:
      title: Business Data
      description: >
        Business data - business name, TIN/EIN etc. If `general_data.entity_type
        == business`, this field is required.

        However, none of the fields in business_data are required. You may send
        in an empty array: `"business_data": {}`.
      type: object
      properties:
        business_name:
          $ref: '#/components/schemas/businessName'
        corporate_tax_id:
          $ref: '#/components/schemas/corporateTaxId'
        account_holder_name:
          type: string
          description: The name of the main person associated with the business
          maxLength: 128
          example: John Smith
        website:
          type: string
          description: The website or associated URL for the business
          maxLength: 512
          example: www.google.com
        registered_state:
          $ref: '#/components/schemas/State'
        registered_country:
          type: string
          description: >-
            Country where the business is registered. Provided acording to the
            ISO 3166-1 alpha-2 standard.
          maxLength: 2
          example: US
        doing_business_as:
          $ref: '#/components/schemas/dbaName'
    createBusiness:
      title: Create a business
      required:
        - general_data
        - business_data
      properties:
        general_data:
          $ref: '#/components/schemas/generalEntitiesProperties'
        business_data:
          $ref: '#/components/schemas/businessDataProperties'
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
        instrument_ids:
          $ref: '#/components/schemas/instrumentsArrayProperties'
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        risk_scores:
          type: array
          description: Set of `risk scores`
          items:
            $ref: '#/components/schemas/riskScoresProperties'
        options:
          $ref: '#/components/schemas/entityOptionsProperties'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
    Ignored:
      type: boolean
      example: true
      description: >-
        During upserts, `true` if all fields are identical to already existing
        fields for that object
    previouslyExisted:
      type: boolean
      description: >-
        During upserts, `true` when object already existed at the ID field
        specified in the POST.
    unit21Id:
      type: string
      description: >-
        A Unit21 internally-assigned unique identifier for an object within the
        Unit21 system.
      example: '1237466'
    createEntityResponse:
      title: entities/create Response
      description: 200 response for `list_entities` operation
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        ignored:
          $ref: '#/components/schemas/Ignored'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    generalEntities:
      title: General entity data
      properties:
        general_data:
          $ref: '#/components/schemas/generalEntitiesProperties'
    documentDataArray:
      title: Document data array
      properties:
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
    communicationData:
      title: Communication Data
      properties:
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
    digitalDataArray:
      title: Digital_data array
      properties:
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
    locationDataArray:
      title: Location data array
      properties:
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
    riskScores:
      title: Risk Scores
      properties:
        risk_scores:
          type: array
          description: Set of `risk scores`
          items:
            $ref: '#/components/schemas/riskScoresProperties'
    entityOptions:
      title: Entity Options
      properties:
        options:
          $ref: '#/components/schemas/entityOptionsProperties'
    customData:
      title: Custom Data
      properties:
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
    userData:
      title: User Data
      description: >
        Personal data - name, birthday, SSN etc. If `general_data.entity_type`
        is set to `user`, this field is required.
      properties:
        user_data:
          $ref: '#/components/schemas/userDataProperties'
    businessData:
      title: Business Data
      description: >
        Business data - business name, TIN/EIN etc. If
        `general_data.entity_type` is set to `business`, this field is required.
      properties:
        business_data:
          $ref: '#/components/schemas/businessDataProperties'
    linkInstrument:
      type: object
      description: 'Associate an instrument directly with an object, like an Entity or Case.'
      properties:
        instrument_ids:
          description: >-
            an array of instruments specified by their `instrument_id`. See
            [instruments](https://guide.unit21.ai/reference#instruments-1)
            section to update.
          type: array
          items:
            type: string
      example:
        instrument_ids:
          - 3234-sdghfdf-3332
          - 3234-sdghfdf-3333
    linkMediaJSON:
      title: Base 64 media
      type: array
      required:
        - media
        - name
      items:
        type: object
        properties:
          media:
            type: string
            description: Base64 encoded media file
            example: RGlkIHlvdSByZWFsbHkgbG9vayB0aGlzIHVwPw==
          name:
            type: string
            description: name of media object
            example: Drivers License
          media_type:
            type: string
            enum:
              - IMAGE_PROFILE_PICTURE
              - IMAGE_DRIVERS_LICENSE_FRONT
              - IMAGE_DRIVERS_LICENSE_BACK
              - IMAGE_PASSPORT_FRONT
              - IMAGE_ID_CARD_FRONT
              - IMAGE_ID_CARD_BACK
              - IMAGE_FACE_IMAGE
            description: >
              Type of media. The dropdown contains Unit21-recognized types.


              Though you can provide any string, Unit21 processes and display
              recognized `media_type` values with custom formatting. Unit21 can
              also use recognized media object types for dedicated requests,
              like document verification.
            example: IMAGE_DRIVERS_LICENSE_FRONT
          custom_data:
            type: object
            description: >-
              Any custom information that you want the Unit21 system to
              associate with this object (accepts any valid JSON object)
            example:
              internal_notes: Reviewed by Mitchell on 31 June 2019
              reviewers: 3
              login: 1638384860
              timestamp: '2012-03-40 05:12:41.000Z'
              daily_email: true
              employees:
                - John
                - Anna
                - Peter
              socure_device_session_id: '12121212121212112'
            additionalProperties: true
    linkMediaForm:
      title: Form Data
      type: object
      properties:
        form_data:
          description: >
            To send media through form data, set `Content-Type` as
            `multipart/form-data`.


            This request has three possible components:

            * A media key name, any alphanumeric string (e.g. `profile_picture`
            in the following code snippet).

            * A value, indicating the path to the media (e.g. the paths
            specified after `@` in the following code snippet).

            * Optional media metadata. Stringified JSON data, sent as a value
            for the media key name.

             Here's an example request. In the path, replace `<OBJECT>` with whatever endpoint you want to reach, e.g. `entities`, `alerts`, etc.

            ```shell

            curl -X PUT \

            'https://{url}/v1/<OBJECT>/{unit21_id}/link-media' \

            -H 'Content-Type: multipart/form-data' \

            -H 'u21-key: <YOUR_API_KEY>' \

            --form 'profile_picture=@/src/103031/images/profile_picture.jpg' \

            --form 'profile_picture={"media_type": "IMAGE_FACE_IMAGE", "source":
            "iPhone_selfie", "timestamp": 1572673229}'

            --form 'document_front=@/src/103031/images/document_front.jpg' \

            --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT",
            "source": "passport_app", "timestamp": 1572673229}'

            ```
    listResponse:
      type: object
      properties:
        response_count:
          type: integer
          example: 10
          description: Number of objects in the response
        total_count:
          type: integer
          example: 100
          description: Total number of objects in the platform.
    instrumentId:
      type: string
      description: Unique identifier of the instrument on your platform.
      maxLength: 128
      pattern: '-\_:.@a-zA-Z0-9!#\$%&\''\*+/=?^`{'
      example: 3234-sdghfdf-3332
    Options:
      properties:
        upsert_on_conflict:
          $ref: '#/components/schemas/upsertOnConflict'
        resolve_geoip:
          $ref: '#/components/schemas/resolveGeoIp'
        merge_custom_data:
          $ref: '#/components/schemas/merge_custom_data'
        list_merge_strategy:
          $ref: '#/components/schemas/listMergeStrategy'
    Instruments:
      title: Instruments
      description: Top-level data about an instrument.
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
        instrument_type:
          type: string
          description: >-
            Type of instrument. Common examples include `bank`, `cash`, and
            `credit card`
          example: account
        source:
          type: string
          enum:
            - internal
            - external
          description: >-
            If your platform owns and administers this instrument, the
            instrument is `internal`, otherwise it is `external`.
          example: internal
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parent_instrument_id:
          type: string
          description: Unique identifier of the instrument on your platform.
          maxLength: 128
          example: 3234-sdghfdf-3331
        tags:
          $ref: '#/components/schemas/Tags'
        options:
          $ref: '#/components/schemas/Options'
    entityArray:
      title: entities
      properties:
        entities:
          description: >-
            Array of entity objects, consisiting of `entity_id` and
            `entity_type`
          type: array
          items:
            type: object
            required:
              - entity_id
              - entity_type
            properties:
              entity_id:
                $ref: '#/components/schemas/entityId'
              entity_type:
                $ref: '#/components/schemas/entityType'
    digitalData:
      title: Digital Data
      properties:
        digital_data:
          description: >-
            Associated digital properties - IP, device, browser, client info
            etc.
          type: object
          properties:
            ip_address:
              $ref: '#/components/schemas/ipAddressSimple'
    createInstrumentResponse:
      title: instruments/create response
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
        ignored:
          $ref: '#/components/schemas/Ignored'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    Devices:
      description: Top-level data about an instrument.
      title: Device data
      required:
        - device_type
        - device_id
      properties:
        device_id:
          $ref: '#/components/schemas/deviceId'
        device_type:
          type: string
          description: Type of device
          maxLength: 128
          example: mobile
        device_subtype:
          type: string
          description: SubType of device
          maxLength: 128
          example: android
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        os_name:
          type: string
          description: Operating system used by the device
          maxLength: 128
          example: Android
        os_version:
          type: string
          description: Operating system version used by the device
          maxLength: 128
          example: 10.1.x
        app_version:
          type: string
          description: Application version used by the device
          maxLength: 128
          example: 5.44.4
        device_manufacturer:
          type: string
          description: Manufacturer of the device value
          maxLength: 128
          example: samsung
        device_model:
          type: string
          description: Specific device model number value
          maxLength: 128
          example: SM-N970U
        timezone:
          type: string
          description: Timezone configured by the device's application/OS
          maxLength: 128
          example: UTC-7
        network_carrier:
          type: string
          description: 'Network carrier used by the device (T-Mobile, Verizon etc.)'
          maxLength: 128
          example: T-Mobile
        network_cellular:
          type: boolean
          description: Whether or not the device has a cellular connection
          example: true
        phone_numbers:
          $ref: '#/components/schemas/phoneNumbers'
        tags:
          $ref: '#/components/schemas/Tags'
        options:
          $ref: '#/components/schemas/Options'
    createDeviceResponse:
      title: devices/create response
      properties:
        device_id:
          $ref: '#/components/schemas/deviceId'
        ignored:
          $ref: '#/components/schemas/Ignored'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    eventId:
      type: string
      description: Unique identifier of the event on your platform
      example: t-9daaebad-478d-4ea3-bbf9-e6320d3f1cea
      minLength: 1
      maxLength: 128
    eventType:
      type: string
      enum:
        - transaction
        - action
      description: >
        `transaction` for monetary flows, `action` for other state changes, like
        new logins.
      example: transaction
    generalEvents:
      title: General Event Data
      properties:
        general_data:
          type: object
          required:
            - event_id
            - event_type
            - event_time
          description: >
            General data is required for any request made to the
            v1/events/create endpoint. This defines any pieces of information
            that allows you to link up any event on Unit21's system to
            transactions or user activities on your platform.
          properties:
            event_id:
              $ref: '#/components/schemas/eventId'
            event_type:
              $ref: '#/components/schemas/eventType'
            event_time:
              $ref: '#/components/schemas/registeredAt'
            event_subtype:
              type: string
              description: >
                Extra info about how your organization classifies the event. You
                MAY enter any value. Useful for granular categories, e.g. if you
                have two types of products and a transaction can be associated
                with either.
              maxLength: 128
              example: payment
            status:
              $ref: '#/components/schemas/objectStatus'
            device_id:
              $ref: '#/components/schemas/deviceId'
            parents:
              description: >-
                The parent object consists of two fields─`event_id` for parent
                unique identifier  and `event_type`.
              items:
                type: object
                properties:
                  event_id:
                    $ref: '#/components/schemas/eventId'
                  event_type:
                    $ref: '#/components/schemas/eventType'
              example:
                event_id: 123
                event_type: transaction
            tags:
              $ref: '#/components/schemas/Tags'
    transactionData:
      title: Transaction data
      properties:
        transaction_data:
          description: >
            In addition to the required `amount` field, must include at least
            one of:

            * `sender_entity_id`

            * `sender_instrument_id`

            * `receiver_entity_id`

            * `receiver_instrument_id`
          type: object
          required:
            - amount
          properties:
            amount:
              type: number
              description: >
                The normalized monetary value of the transaction in customer's
                home currency. This value MUST be greater than or equal to zero.
                Direction of monetary flow should be entirely denoted by the
                specifying sender/receiver entities and instruments
                appropriately.
              example: 13562.83
            sent_amount:
              type: number
              description: >
                The monetary value of the transaction, specified in terms of the
                currency set in the sent_currency field. This value must be
                positive (greater or equal to zero). Denote by the specifying
                sender/receiver entities and instruments appropriately.
              example: 13562.83
            sent_currency:
              type: string
              description: The currency that the sender sent
              maxLength: 128
              example: USD
            sender_entity_id:
              type: string
              description: >
                Identifier of the sender entity on your platform - should
                correspond to the `entity_id` field in an entity's
                `general_data` section if the `sender_source` is `internal`. If
                `sender_source` is `external`, this does not need to correspond
                to anything in the Unit21 system.
              maxLength: 128
              example: u-371b5091-da30-48a8-936b-7600f9983e80
            sender_entity_type:
              type: string
              enum:
                - user
                - business
              description: >
                (Required when `sender_source` is `internal`, ignored otherwise)
                The entity type of the sender as defined in Entity's
                `general_data` section. Must be either a user or business.
              example: user
            sender_source:
              type: string
              enum:
                - internal
                - external
              description: >
                Either internal or external. Internal senders exist on your
                platform (and on Unit21's system), external senders are external
                to your ecosystem and do not exist on your platform. Internal
                senders are matched with entities on Unit21's system; external
                senders are not.
              maxLength: 128
              example: internal
            sender_instrument_id:
              type: string
              description: >
                Identifier of the sender's transaction instrument on your
                platform. if the `sender_source` is `internal`. and the
                transaction is facilitated by an instrument (it may not always
                be), `sender_instrument_id` should correspond to the
                `instrument_id` field in an entity's `instrument_data` section.
              maxLength: 128
              example: instrumentA-3967112
            received_amount:
              type: number
              description: >-
                The monetary value of the transaction, specified in terms of the
                currency set in the `received_currency` field. This value must
                be positive (greater or equal to zero). Direction of monetary
                flow should be entirely denoted by the specifying
                sender/receiver entities and instruments appropriately.
              example: 13562.83
            received_currency:
              type: string
              description: The currency that the receiver party received
              maxLength: 128
              example: USD
            receiver_entity_id:
              type: string
              description: >-
                Identifier of the receiver entity on your platform - should
                correspond to the entity_id field in an entity's general_data
                section if the receiver_source is internal. If receiver_source
                is external, this does not need to correspond to anything in our
                system
              maxLength: 128
              example: u-d8e1d453-c205-4996-a935-ff08be01bcd1
            receiver_entity_type:
              type: string
              enum:
                - user
                - business
              description: >
                (Required when `receiver_source == internal`, ignored
                otherwise). The entity type of the receiver as defined in
                Entity's general_data section. MUST be either `user` or
                `business`.
              example: business
            receiver_source:
              type: string
              enum:
                - internal
                - external
              description: >
                Either internal or external. Internal receivers exist on your
                platform (and on Unit21's system), external receivers are
                external to your ecosystem and do not exist on your platform.
                Internal receivers will be matched with entities on Unit21's
                system while external receivers will not.
              example: internal
            receiver_instrument_id:
              type: string
              description: >
                Identifier of the receiver's transaction instrument on your
                platform. If the receiver_source is internal and the transaction
                is facilitated by an instrument (it may not always be),
                `receiver_instrument_id` should correspond to the
                `instrument_id` field in an entity's `instrument_data` section.
              maxLength: 128
              example: t376839428256371
            exchange_rate:
              type: number
              description: >
                If both sent_currency and received_currency are defined, and
                neither of them are in the home currency, then this is defined
                as sent_amount/received_amount. If either `sent_currency` or
                `received_currency` are in the home currency (but not both),
                then `exchange_rate` is defined as
                `home_currency_amount/non_home_currency_amount`. If both
                sent_currency and received_currency are in the home currency,
                not required.
              example: 1.0012
            usd_conversion_notes:
              type: string
              description: >-
                Readable information associated with the exchange rate(s) used,
                e.g. when the exchange rate was pulled, from what source it was
                obtained
              example: pulled from forex.com at 1572672226
            internal_fee:
              type: number
              description: >
                The sum of all internal fees associated with the transaction,
                specified in USD. Internal fees are collected by your platform
                e.g. if users pay a fee to you for facilitating a transaction
                from user to user. All other field amounts should not include
                the value of these fees.
              example: 5
            external_fee:
              type: number
              description: >
                The sum of all external fees associated with the transaction,
                specified in USD. External fees are paid out to external parties
                independent of your platform e.g. payment network fees, shipping
                fees, cleaning fees. All other amount fields should not include
                the value of these fees
              example: 5
    actionData:
      title: Action data
      properties:
        action_data:
          type: object
          description: >
            Information about any notable actions that a user takes on your
            system. Examples of actions that may be worth tracking are:
              * Password changes from new IP addresses
              * Logins from disparate locations
              * Linking or unlinking instruments at an unusual frequency
              * Finding users frequently using referral codes, potentially signally fake referral schemes.
          required:
            - entity_id
            - entity_type
          properties:
            action_type:
              type: string
              description: >
                A keyword (of your choosing) that describes an action event,
                e.g. `LOGIN`, `SIGNUP`, `PASSWORD_RESET`.
              maxLength: 512
              example: LOGIN
            action_details:
              type: string
              description: Extra information that provides more context about the event.
              maxLength: 4096
              example: Through mobile app v0.8.8
            entity_id:
              type: string
              description: >-
                Identifier of the entity on your platform that is associated
                with this action event─should correspond to the `entity_id`
                field in an [entity's `general_data`
                section](ref:create_entity).
              maxLength: 128
              example: 371c4d7b-0563-4685-aab1
            entity_type:
              $ref: '#/components/schemas/entityType'
            instrument_id:
              type: string
              description: >-
                Identifier of the transaction instrument on your platform that
                is associated with this action event - should correspond to the
                `instrument_id` field in an [entity's `instrument_data`
                section](ref:create_entity)
              maxLength: 128
              example: 238938823-34347686-39405443
    locationData:
      title: Location data
      properties:
        location_data:
          $ref: '#/components/schemas/locationDataProperties'
    eventOptions:
      title: Event options
      properties:
        options:
          type: object
          properties:
            monitor:
              type: boolean
              description: >-
                Whether or not to monitor this event (defaults to `true`).
                Typically used to signal Unit21 to not flag such events or
                include them in calculations i.e. to prevent double counting, or
                to ignore applying monitoring to unimportant events that you
                still want to associate with users
              default: true
            resolve_geoip:
              $ref: '#/components/schemas/resolveGeoIp'
            link_digital_data_to_entity:
              type: boolean
              description: >-
                Whether or not to link the included `digital_data` with the
                related entities. Includes geoip information if resolve_geoip is
                enabled as well. On action events, defaults to `true`
              example: true
            linked_entity:
              type: string
              enum:
                - sender
                - receiver
                - both
              default: both
              description: >-
                Possible values are `sender`, `receiver`, and `both`. Defaults
                to `both`. If `link_digital_data_to_entity` is flagged on
                transaction events, this specifies which entities to associate
                the `digital_data` to. If there is no `digital_data` or
                entities, no exception is thrown.
              example: sender
            merge_custom_data:
              $ref: '#/components/schemas/merge_custom_data'
            list_merge_strategy:
              $ref: '#/components/schemas/listMergeStrategy'
            upsert_on_conflict:
              $ref: '#/components/schemas/upsertOnConflict'
    createEventResponse:
      title: events/create response
      properties:
        event_id:
          $ref: '#/components/schemas/eventId'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    Disposition:
      type: string
      description: >-
        Labels that describe the outcome of an alert or case investigation. More
        info in [this knowledge base article about
        dispositions](https://docs.unit21.ai/docs/concept-dispositions).
      maxLength: 128
      example: TRUE_POSITIVE
    dispositionedBy:
      type: array
      description: >-
        List of agent emails. Returns only objects whose dispositions were most
        recently changed by listed agents.
      items:
        type: string
        example: agent1@example.com
    rulesU21Array:
      type: array
      description: Only objects associated with the listed rules' `unit21_id` values.
      items:
        type: integer
      example:
        - 13
        - 21
    associatedEntities:
      type: array
      description: Only objects associated with the listed entities' `unit21_id` values.
      items:
        type: integer
      example:
        - 1011
        - 1012
    associatedEvents:
      type: array
      description: Only objects associated with the listed events' `unit21_id` values.
      items:
        type: integer
      example:
        - 30120
        - 30130
    associatedInstruments:
      type: array
      description: Only objects associated with the listed instruments' `unit21_id` values.
      items:
        type: integer
      example:
        - 11
        - 12
    sourceArray:
      type: array
      description: 'Only `INTERNAL`, only `EXTERNAL`, or both.'
      items:
        type: string
        enum:
          - INTERNAL
          - EXTERNAL
    investigationStatus:
      type: string
      description: 'Investigation status, either `OPEN` or `ClOSED`'
      enum:
        - OPEN
        - CLOSED
      example: OPEN
    statusArray:
      type: array
      description: Only objects from the listed set of `status` values. E.g. only `OPEN`
      items:
        $ref: '#/components/schemas/investigationStatus'
    alertListFilters:
      description: 'To filter your response to a subset of alerts, use these fields.'
      properties:
        types:
          type: array
          description: The `alert_types` to include─any or all of `tm` and `kyc`
          items:
            type: string
            enum:
              - tm
              - kyc
        created_after:
          $ref: '#/components/schemas/registeredAt'
        created_before:
          $ref: '#/components/schemas/registeredAt'
        dispositions:
          type: array
          description: Set of `disposition` values to include.
          items:
            $ref: '#/components/schemas/Disposition'
        dispositioned_after:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_before:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_by:
          $ref: '#/components/schemas/dispositionedBy'
        rules:
          $ref: '#/components/schemas/rulesU21Array'
        associated_entities:
          $ref: '#/components/schemas/associatedEntities'
        associated_events:
          $ref: '#/components/schemas/associatedEvents'
        associated_instruments:
          $ref: '#/components/schemas/associatedInstruments'
        sources:
          $ref: '#/components/schemas/sourceArray'
        statuses:
          $ref: '#/components/schemas/statusArray'
        tag_filters:
          $ref: '#/components/schemas/Tags'
        options:
          type: object
          description: >-
            Options for the data included in the returned alerts. Removing
            unneeded options can improve response speed.
          properties:
            include_associations:
              type: boolean
              description: >-
                If `true`, the response includes all entities, events &
                instruments associated with the alert
              example: false
            include_actions:
              type: boolean
              description: >-
                If `true`, the response includes list of all actions taken on
                the alert, including disposition changes, status changes,
                reassignments, etcetera
              example: false
    alertId:
      type: string
      description: Unique identifier of the alert on the customer's platform.
      maxLength: 128
      example: alertA-028eb01a-f8d3-42fb-b398-785b596ee4cb
    dispositionNotes:
      type: string
      description: Free form text documenting reasoning and investigation notes
      example: User confirmed that they did not initiate transaction
    Alerts:
      required:
        - alert_id
        - alert_type
        - created_at
        - title
        - status
      properties:
        alert_id:
          $ref: '#/components/schemas/alertId'
        alert_type:
          type: string
          enum:
            - tm
            - kyc
          description: >-
            Either transaction monitoring, `tm`, or know-your-customer `kyc`.
            Default is `tm`
          example: tm
        created_at:
          $ref: '#/components/schemas/registeredAt'
        title:
          type: string
          description: Title of the alert
          example: Account deviation for user T18029
        verification_result_id:
          type: integer
          description: >-
            Integer value greater than or equal to 1. Used when `alert_type` is
            `kyc`.
          minimum: 1
          example: 42
        description:
          type: string
          description: Description of the alert
          example: >-
            Flagged 2 transactions in last hour that were 3 standard deviations
            outside 3 month mean.
        status:
          $ref: '#/components/schemas/investigationStatus'
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_notes:
          $ref: '#/components/schemas/dispositionNotes'
        tags:
          $ref: '#/components/schemas/Tags'
        options:
          type: object
          properties:
            merge_custom_data:
              $ref: '#/components/schemas/merge_custom_data'
            list_merge_strategy:
              $ref: '#/components/schemas/listMergeStrategy'
    eventArray:
      title: events
      properties:
        events:
          description: 'Array of event objects, consisting of `event_id` and `event_type`'
          type: array
          items:
            type: object
            required:
              - event_id
              - event_type
            properties:
              event_id:
                example: event-1063e4e3e1
                type: string
              event_type:
                $ref: '#/components/schemas/eventType'
    instrumentArray:
      title: instruments
      properties:
        instruments:
          description: Array of `instrument_id` strings
          type: array
          items:
            $ref: '#/components/schemas/instrumentId'
    ruleArray:
      title: rules
      properties:
        rules:
          description: Array of "rule_id" strings
          type: array
          items:
            type: string
            example: r3-0ddfn3
    createAlertResponse:
      title: Create Alert response
      properties:
        alert_id:
          $ref: '#/components/schemas/alertId'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    caseListFilters:
      description: 'To filter your response to a subset of alerts, use these fields.'
      properties:
        created_after:
          $ref: '#/components/schemas/registeredAt'
        created_before:
          $ref: '#/components/schemas/registeredAt'
        dispositions:
          type: array
          description: Set of `disposition` values to include.
          items:
            $ref: '#/components/schemas/Disposition'
        dispositioned_after:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_before:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_by:
          $ref: '#/components/schemas/dispositionedBy'
        rules:
          $ref: '#/components/schemas/rulesU21Array'
        associated_entities:
          $ref: '#/components/schemas/associatedEntities'
        associated_events:
          $ref: '#/components/schemas/associatedEvents'
        associated_instruments:
          $ref: '#/components/schemas/associatedInstruments'
        sources:
          $ref: '#/components/schemas/sourceArray'
        statuses:
          $ref: '#/components/schemas/statusArray'
        options:
          type: object
          description: >-
            Options for the data included in the returned case. Removing
            unneeded options can improve response speed.
          properties:
            include_associations:
              type: boolean
              description: >-
                If `true`, the response includes all entities, events &
                instruments associated with the case
              example: false
            include_actions:
              type: boolean
              description: >-
                If `true`, the response includes list of all actions taken on
                the case, including disposition changes, status changes,
                reassignments, etcetera
              example: false
    caseId:
      type: string
      description: Unique identifier of the case on the customer's platform
      maxLength: 128
      example: CaseA-123
    Cases:
      description: Top-level case data
      title: Case data
      required:
        - case_id
        - created_at
        - title
        - start_date
      properties:
        case_id:
          $ref: '#/components/schemas/caseId'
        title:
          type: string
          description: Title of the case
          maxLength: 256
          example: Active fraud investigation
        start_date:
          $ref: '#/components/schemas/registeredAt'
        description:
          type: string
          description: Description of the case
          maxLength: 1024
          example: suspected money laundering example
        status:
          $ref: '#/components/schemas/investigationStatus'
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_notes:
          $ref: '#/components/schemas/dispositionNotes'
        end_date:
          $ref: '#/components/schemas/registeredAt'
        tags:
          $ref: '#/components/schemas/Tags'
    createCaseResponse:
      title: Create case response
      properties:
        case_id:
          $ref: '#/components/schemas/caseId'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    entityVerification:
      title: Entity Verification
      description: Fields to verify an entity
      required:
        - workflow_id
      properties:
        workflow_id:
          $ref: '#/components/schemas/workflowId'
        synchronous_response:
          $ref: '#/components/schemas/synchronousResponse'
        include_full_response:
          $ref: '#/components/schemas/includeFullResponse'
    linkVerificationResult:
      title: Link verification result
      description: >-
        Fields to link external verification results to entity in the Unit21
        system
      required:
        - verification_type
        - provider_name
        - content
      properties:
        verification_type:
          type: string
          enum:
            - ID_VERIFICATION
            - DOC_VERIFICATION
            - BUSINESS_VERIFICATION
            - WATCHLIST_SCREENING
            - ADVERSE_MEDIA_SCREENING
            - CRYPTO_FORENSICS
          description: >-
            Type of verification, in one of the categories that the Unit21
            system recognizes
        provider_name:
          type: string
          description: name of KYC provider
          example: FAKE_PROVIDER
        content:
          type: object
          additionalProperties: true
          description: JSON-formatted response from verification provider
          example:
            content:
              test:
                nested_field: 123
              boolean_field: false
              error: An error occurred
        verification_timestamp:
          $ref: '#/components/schemas/registeredAt'
    linkVerificationResponse:
      properties:
        created_at:
          $ref: '#/components/schemas/registeredAt'
        entity_id:
          type: string
          description: Unit21 ID of the entity that the verification was run on.
        source:
          type: string
          description: 'Provider that ran the verification (IDOLOGY, TRULIOO, etc.)'
        type:
          type: string
          description: >-
            Type of verification executed (DOC_VERIFICATION, ID_VERIFICATION,
            etc.)
        verification_workflow_execution_id:
          type: number
          description: ID of the workflow execution
        full_response:
          type: object
          description: >-
            Full response from the verification provider running the
            verification
    synchronousResponses:
      type: boolean
      description: >-
        **Default**: `false`. If `true`,  the response is returned in the
        request but may take slightly longer to complete.
      default: false
      example: false
    continuousMonitoring:
      type: object
      required:
        - continuous_monitoring
      properties:
        continuous_monitoring:
          type: boolean
          description: >
            Enable or disable continuous monitoring. Use `true` to turn on and
            `false` to turn off.
        synchronous_response:
          $ref: '#/components/schemas/synchronousResponses'
    suppressProviderEntity:
      type: object
      required:
        - suppress
        - provider_entity_ids
      properties:
        suppress:
          type: boolean
          description: >
            Enable or disable the silencing of the entity. Use `true` to turn on
            and `false` to turn off.
        synchronous_response:
          $ref: '#/components/schemas/synchronousResponses'
        provider_entity_ids:
          type: array
          description: |
            Array of entity ID strings
          items:
            type: string
          example:
            - '5676572343'
            - '4657605135'
    tagFilters:
      description: >-
        To filter your response to a subset of tag associations, use these
        fields.
      properties:
        created_after:
          $ref: '#/components/schemas/registeredAt'
        created_before:
          $ref: '#/components/schemas/registeredAt'
        object_types:
          type: array
          description: >-
            Limit response to only tags associated with the set of listed Unit21
            objects. The accepted values are `alert`, `case`, `sar`, `rule`,
            `agent`, `event`, `entity`, and `instrument`. If an `object_id` is
            specified,  and more than one value is provided to `object_types`,
            the API returns an error.
          items:
            type: string
            enum:
              - alert
              - case
              - sar
              - rule
              - agent
              - event
              - entity
              - instrument
          example:
            - alert
            - case
        object_id:
          type: integer
          description: >
            String representing the `unit21_id` of the object you want to get
            tag associations for. If this is specified and `object_types`
            contains more than one value, the API returns an error.
        tag_filters:
          type: array
          description: >-
            List of string tags in the format `key:value` or `key` to match
            against (e.g. `alert_type:high_velocity` or `alert_type`). If only
            the key is provided, the API matches against all tags with that key.
          items:
            type: string
            format: key-value pair
            example: 'Sector:Europe'
    createBlacklist:
      properties:
        name:
          type: string
          description: A human-readable name for the blacklist.
          maxLength: 512
          example: New Blacklist
        description:
          type: string
          description: >-
            A descriptive text field for the blacklist, maximum 512 characters
            in length.
          maxLength: 512
          example: Unit21 rules will check against items in this list
        type:
          type: string
          enum:
            - STRING
            - IP_INET
            - IP_CIDR
            - USER
            - BUSINESS
          description: >-
            A value indicating what type of fields the blacklist will contain.
            One of `STRING`, `IP_INET`, `IP_CIDR`, `USER`, or `BUSINESS`.
    streetAddress:
      type: string
      description: Street name and address number
      maxLength: 128
      example: 2365 Peachtree
    blacklistUser:
      title: User blacklist
      description: >-
        Array of user objects. No field is required, but each object MUST
        contain at least one field.
      type: array
      items:
        type: object
        properties:
          first_name:
            type: string
            description: User's associated first name
            example: John
          middle_name:
            type: string
            description: User's associated middle name
            example: Joseph
          last_name:
            type: string
            description: User's associated last name
            example: Smith
          alias_first_name:
            type: string
            description: Alias or alternate first name
            example: Art
          alias_middle_name:
            type: string
            description: Alias or alternate middle name
            example: Oso
          date_of_birth:
            type: string
            description: in format MM/DD/YYYY
            example: 12/25/1989
          ssn:
            type: string
            pattern: '^\d{3}-\d{2}-\d{4}$'
            description: 'Social security number of the user, in the format xxx-xx-xxxx'
            example: 733-99-5921
          street:
            $ref: '#/components/schemas/streetAddress'
          city:
            $ref: '#/components/schemas/City'
          state:
            $ref: '#/components/schemas/State'
          zip_code:
            $ref: '#/components/schemas/zipCode'
          country:
            $ref: '#/components/schemas/Country'
          client_fingerprint:
            description: >-
              Digital fingerprints(browser, os, device) associated with the
              entity.
            type: string
            example: 4908hsdfknkd90432nj3k2kj2jk23kj2k3jk2j3
          ip_address:
            $ref: '#/components/schemas/ipAddressSimple'
          email:
            description: Email associated with this user
            type: string
            example: JohnJay@example.com
          phone_number:
            description: >-
              List of phone numbers associated with the entity in [E.164
              format](https://en.wikipedia.org/wiki/E.164)─e.g. +12125551395 (
              '[+][country code][area code][local phone number]' )
            type: string
            example: '+14159627132'
          entity_status:
            $ref: '#/components/schemas/objectStatus'
          entity_subtype:
            $ref: '#/components/schemas/entitySubtype'
    blacklistBusiness:
      title: Business blacklist
      type: array
      description: >-
        Array of business objects. No field is required, but each object MUST
        contain at least one field.
      items:
        type: object
        properties:
          business_name:
            $ref: '#/components/schemas/businessName'
          dba_name:
            $ref: '#/components/schemas/dbaName'
          corporate_tax_id:
            $ref: '#/components/schemas/corporateTaxId'
          street:
            $ref: '#/components/schemas/streetAddress'
          city:
            $ref: '#/components/schemas/City'
          state:
            $ref: '#/components/schemas/State'
          country:
            $ref: '#/components/schemas/Country'
          zip_code:
            $ref: '#/components/schemas/zipCode'
    blacklistINET:
      title: IP INET
      type: array
      description: Array of single IPs
      items:
        type: object
        required:
          - ip_address
        properties:
          ip_address:
            $ref: '#/components/schemas/ipAddressSimple'
          source:
            type: string
            description: Origin of IP
            example: Internal list
    blacklistCIDR:
      title: Blacklist of IP CIDR
      type: array
      description: Array of IP ranges
      items:
        type: object
        required:
          - cidr
        properties:
          cidr:
            type: string
            description: >-
              CIDR IP range. Check ranges with [this
              calculator](https://www.ipaddressguide.com/cidr)
            example: 255.255.255.255/24
          source:
            type: string
            description: Origin of IP range
            example: USA
    blacklistString:
      title: Blacklist string
      type: array
      description: Array of text strings in key value pairs
      items:
        type: object
        properties:
          blacklist_value:
            type: string
            description: string value to upload to blacklist
            example: Anything
  requestBodies:
    list:
      description: ''
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listRequest'
  responses:
    '400':
      description: Bad Request. Your request is invalid.
    '401':
      description: 'Unauthorized. Your client_id, client_secret, or access_token is invalid.'
    '403':
      description: >-
        Forbidden. You do not have the permissions to access the requested
        resource.
    '404':
      description: Not Found. The specified resource could not be found.
    '409':
      description: >-
        Conflict. You tried to insert or overwrite a system resource that cannot
        be overwritten.
    '423':
      description: Locked. Object updates in progress. Please try again later.
    '429':
      description: >-
        Rate Limit Reached. You have reached the request rate limit. Try your
        request again later.
    '500':
      description: >-
        Internal Server Error. We had a problem with our server. Try again
        later.
    '503':
      description: >-
        Service Unavailable. We're temporarily offline for maintenance. Please
        try again later.
  parameters:
    unit21_id:
      in: path
      name: unit21_id
      schema:
        type: string
      required: true
      description: >-
        A Unit21 internally-assigned unique identifier for an object within the
        Unit21 system. Depending on the endpoint, `unit21_id` can refer to an
        entity, an event, a case, an alert, a device, etc.
      example: 571485314
    entity_id:
      in: path
      name: entity_id
      schema:
        $ref: '#/components/schemas/entityId'
      required: true
      example: userA-38f8e0Rwdf63nld71112345132UeUKFWE123
    org_name:
      in: path
      name: org_name
      schema:
        type: string
      required: true
      description: name of organization in your environment
      example: unit21
    instrument_id:
      in: path
      name: instrument_id
      schema:
        type: string
      required: true
      description: Unique identifier of the instrument on your platform
      example: 1036492444
    device_id:
      in: path
      name: device_id
      schema:
        type: string
      required: true
      description: Identifier of the device within your system
      example: 601
    event_id:
      in: path
      name: event_id
      schema:
        type: string
      required: true
      description: Unique identifier of the event on your platform
      example: 1560408033
    workflow_id:
      in: path
      name: workflow_id
      schema:
        type: string
      required: true
      description: >-
        A Unit21 internally-assigned unique identifier for the verification
        workflow of the entity.
      example: verified-customer-onboarding
    agent_email:
      in: path
      name: agent_email
      schema:
        type: string
      required: true
      description: Email of an agent in your organization
      example: foobar@unit21.ai
